{
  "Uuid": "4bd6fa9f-b9a8-4d38-9d8a-90a464c6d5b2",
  "IsCustomNode": false,
  "Description": null,
  "Name": "U9-TrackLine_3.4.04_wForwardPass",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "5a1fb6986487418a80057656a50ca8a1",
      "Name": "Wall Height",
      "Type": "number",
      "Value": "8",
      "MaximumValue": 50.0,
      "MinimumValue": 5.0,
      "StepValue": 0.1,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "b946a6d5f8134cbd98d05f5965d1fa06",
      "Name": "Delete All Elements Before Each Run",
      "Type": "boolean",
      "Value": "true",
      "Description": "Selection between a true and false."
    },
    {
      "Id": "d81e3a3ec50544a4a711c14418961e25",
      "Name": "No of Column Rows",
      "Type": "number",
      "Value": "2",
      "MaximumValue": 2.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "NumberType": "Integer",
      "Description": "A slider that produces integer values."
    },
    {
      "Id": "f720c80e6f1d4f21bebdcb9555f2933e",
      "Name": "Terminus",
      "Type": "boolean",
      "Value": "false",
      "Description": "Selection between a true and false."
    },
    {
      "Id": "3cb6533b3fa5459f9123ae291f780de2",
      "Name": "Max. Train Length",
      "Type": "number",
      "Value": "115",
      "NumberType": "Double",
      "Description": "Creates a number."
    },
    {
      "Id": "2f3255ccafbc41a380f658fde805b3c4",
      "Name": "Bumper Length",
      "Type": "number",
      "Value": "10",
      "NumberType": "Double",
      "Description": "Creates a number."
    },
    {
      "Id": "7b33e5c900614f629567cf0acb30494b",
      "Name": "Standard Length",
      "Type": "boolean",
      "Value": "true",
      "Description": "Selection between a true and false."
    },
    {
      "Id": "3949bf9b3e7a4dcfb52c38c63d41f89c",
      "Name": "Traffic Level i",
      "Type": "number",
      "Value": "1",
      "MaximumValue": 3.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "2122344a6c6c4f5e900634e71d62c5eb",
      "Name": "Local Traffic",
      "Type": "boolean",
      "Value": "true",
      "Description": "Selection between a true and false."
    },
    {
      "Id": "859c366329bb4d16875a776dac8f000a",
      "Name": "Elevator Length [m]",
      "Type": "number",
      "Value": "6",
      "MaximumValue": 10.0,
      "MinimumValue": 6.0,
      "StepValue": 0.5,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "04530e04386248d3a3affe3762d7660b",
      "Name": "Velocity [km/h]",
      "Type": "number",
      "Value": "100",
      "MaximumValue": 230.0,
      "MinimumValue": 10.0,
      "StepValue": 10.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "b420fc1637f44fc5a6fd8e9929a525df",
      "Name": "Train Frequency [n/h]",
      "Type": "number",
      "Value": "3",
      "MaximumValue": 15.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "d5fd982584d446088314965fc077506a",
      "Name": "Elevator Position",
      "Type": "number",
      "Value": "2",
      "MaximumValue": 3.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "619194ee147a46bf869e3e6373ed406f",
      "Name": "Exit  X Offset [m]",
      "Type": "number",
      "Value": "20",
      "MaximumValue": 50.0,
      "MinimumValue": 5.0,
      "StepValue": 0.5,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "5f4f339b8e3e4864bf9f6a99777f8b4c",
      "Name": "Ticketmachine X Offset [m]",
      "Type": "number",
      "Value": "7",
      "MaximumValue": 15.0,
      "MinimumValue": 3.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "e15d5903d5f94bfabbbc763e0f037f08",
      "Name": "Escalators Facing Inwards",
      "Type": "boolean",
      "Value": "true",
      "Description": "Selection between a true and false."
    },
    {
      "Id": "31a13685283c42b9add86dd57ed46c95",
      "Name": "Index",
      "Type": "number",
      "Value": "1",
      "MaximumValue": 3.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "NumberType": "Integer",
      "Description": "A slider that produces integer values."
    },
    {
      "Id": "5d9828480221475baf6e48bad2b42525",
      "Name": "Passengers/Train",
      "Type": "number",
      "Value": "100",
      "MaximumValue": 100.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "d087c5b10db143da9f71e77163911823",
      "Name": "Regional Traffic",
      "Type": "boolean",
      "Value": "true",
      "Description": "Selection between a true and false."
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "EG",
      "NodeType": "ExtensionNode",
      "Id": "91184f7c047c40aaa110ded98cf3e461",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0b572195c4804c18a64f36fa000d3217",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "DSRevitNodesUI.WallTypes, DSRevitNodesUI",
      "SelectedIndex": 3,
      "SelectedString": "STB 20.0",
      "NodeType": "ExtensionNode",
      "Id": "16ebeca796054d8f923afbaf528319bd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "645ffdbbd04b407ba2aeb46ca5ab76ec",
          "Name": "Wall Type",
          "Description": "The selected Wall Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All wall types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": 5.0,
      "StepValue": 0.1,
      "InputValue": 8.0,
      "Id": "5a1fb6986487418a80057656a50ca8a1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5f6d3e15c28d4dbabb280bdded66e5e8",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport clr\r\nimport math\r\n\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#Import Revit Nodes\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Import RevitAPI\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Architecture import *\r\n\r\n# Import DocumentManager and TransactionManager\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n# Length - Width - height variables\r\n\r\nlevelEG = UnwrapElement(IN[0])\r\nallElements = UnwrapElement(IN[1])\r\nisDeleteAll = IN[2]\r\n\r\ngeneralParameterList = IN[3]\r\nnumberOfLevels = generalParameterList[0]\r\ntrackLineCount = generalParameterList[1]\r\nnumberofExits = generalParameterList[2]\r\ncolumnRows = generalParameterList[3]\r\ncolumnSpacing = generalParameterList[4]\r\nwallHeight = generalParameterList[5]\r\n\r\nverticalTransportationList = IN[4]\r\nnumberOfStairs = verticalTransportationList[0]\r\nstairWidth = verticalTransportationList[1]\r\nescOrientation = verticalTransportationList[2]\r\nnumberOfEscalators = verticalTransportationList[3]\r\nescalatorWidth = verticalTransportationList[4]\r\nelevatorPosition = verticalTransportationList[5]\r\nelevatorLength = verticalTransportationList[6]\r\n\r\nclearanceVariablesList = IN[5]\r\n\r\nWidthCalcList = IN[6]\r\nplatformWidth = WidthCalcList[0]\r\nplatformHeight = WidthCalcList[1]\r\ntrafficLevel = WidthCalcList[2]\r\nregional = WidthCalcList[3]\r\nouterTrack = WidthCalcList[4]\r\ninnerTracks = WidthCalcList[5]\r\ndistTracks = WidthCalcList[6]\r\ndistTrackPlatform = WidthCalcList[7]\r\ndangerZone = WidthCalcList[8]\r\nsafetyStripPlatform = WidthCalcList[9]\r\n\r\ntopLevelList = IN[7]\r\nexitOffset = topLevelList[0]\r\nnumberOfMachines = topLevelList[1]\r\nticketXOffset = topLevelList[2]\r\n\r\ncrowditList = IN[8]\r\n\r\nlength = IN[9]\r\n\r\ntypeList = IN[10]\r\nfloorType = UnwrapElement(typeList[0])\r\nwallType = UnwrapElement(typeList[1])\r\n\r\npassengers = IN[11]\r\n\r\n# custom:\r\nonlyExport = IN[13]\r\n\r\nif not onlyExport:\r\n\r\n\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t\r\n\t# Place your code below this line\r\n\tplatformCount=int(math.ceil(float(trackLineCount)/2))\r\n\twallThickness= UnitUtils.ConvertFromInternalUnits(wallType.Width, DisplayUnitType.DUT_METERS)\r\n\t\r\n\twidth = platformCount * platformWidth + (platformCount - 1) * (innerTracks) + wallThickness\r\n\tif trackLineCount %2 ==0:\r\n\t\twidth += 2 * outerTrack\r\n\telse:\r\n\t\twidth += outerTrack\r\n\t\r\n\tyAxisList = []\r\n\trevitApiYAxisList = []\r\n\tfor indexY in range(platformCount):\r\n\t\tyAxis = (indexY * platformWidth) + outerTrack + wallThickness/2 + indexY * innerTracks\r\n\t\tyAxisList.append(yAxis)\r\n\t\trevitApiYAxisList.append(UnitUtils.ConvertToInternalUnits(yAxis, DisplayUnitType.DUT_METERS))\r\n\t\r\n\tescalatorLength = (wallHeight * 1.732050808) + 3.5 + 2.950 +0.4 #Family specific\r\n\t\r\n\t# Revit Api Unit Type Conversion\r\n\trevitApiLength = UnitUtils.ConvertToInternalUnits(length, DisplayUnitType.DUT_METERS)\r\n\trevitApiWidth = UnitUtils.ConvertToInternalUnits(width, DisplayUnitType.DUT_METERS)\r\n\trevitApiWallHeight = UnitUtils.ConvertToInternalUnits(wallHeight, DisplayUnitType.DUT_METERS)\r\n\trevitApiPlatformHeight = UnitUtils.ConvertToInternalUnits(platformHeight, DisplayUnitType.DUT_METERS)\r\n\trevitApiPlatformWidth = UnitUtils.ConvertToInternalUnits(platformWidth, DisplayUnitType.DUT_METERS)\r\n\trevitApiStairWidth = UnitUtils.ConvertToInternalUnits(stairWidth, DisplayUnitType.DUT_METERS)\r\n\trevitApiEscalatorWidth = UnitUtils.ConvertToInternalUnits(escalatorWidth, DisplayUnitType.DUT_METERS)\r\n\trevitApiEscalatorLength = UnitUtils.ConvertToInternalUnits(escalatorLength, DisplayUnitType.DUT_METERS)\r\n\trevitApiElevatorLength = UnitUtils.ConvertToInternalUnits(elevatorLength, DisplayUnitType.DUT_METERS)\r\n\t\r\n\t#OUT OF ORDER Stair width calculation\r\n\t\t# set variables dependant on traffic Level\r\n\t\t#if trafficLevel == 1:\r\n\t\t#\tv = 1.3 # [m/s]\r\n\t\t#\tif regional:\r\n\t\t#\t\td = 0.5 # [p/m^2]\r\n\t\t#\telse: \r\n\t\t#\t\td = 0.3\r\n\t\t#elif trafficLevel == 2:\r\n\t\t#\tv = 1.3\r\n\t\t#\tif regional:\r\n\t\t#\t\td = 1\r\n\t\t#\telse: \r\n\t\t#\t\td = 0.8\r\n\t\t#elif trafficLevel == 3:\r\n\t\t#\tv = 1.3\r\n\t\t#\td = 1\r\n\t\t#clearanceTime = 150 # [s]\r\n\t\t#stairWidth = passengers/(v * d * clearanceTime) + 0.8 # 813.0202A01 p.1\r\n\t\t# set the width to a standard value \r\n\t\t#if stairWidth < 0.8:\r\n\t\t#\tstairWidth = 0.8\r\n\t\t#elif stairWidth < 1.6:\r\n\t\t#\tstairWidth = 1.6\r\n\t\t#elif stairWidth < 2.4:\r\n\t\r\n\t#Start Transaction\r\n\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\r\n\t# Before Run delete everything for the first time Revit Opened \r\n\tlevelArr = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Levels).WhereElementIsNotElementType().ToElements()\r\n\tviewArr = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Views).ToElements()\r\n\t\r\n\tfor view in viewArr:\r\n\t\tif view.Name != IN[12].Name and view.ViewType == ViewType.FloorPlan:\r\n\t\t\tprint (view.Title.ToString(), view.Id.ToString(), view.Name.ToString())\r\n\t\t\tdoc.Delete(view.Id)\r\n\t\t\t\r\n\tif levelArr.Count >= 1:\r\n\t\tfor levelElem in levelArr:\r\n\t\t\tif round(levelElem.Elevation,2) == 0.0:\r\n\t\t\t\tcontinue\r\n\t\t\tdoc.Delete(levelElem.Id)\r\n\t\t\t#doc.Regenerate()\r\n\tif isDeleteAll:\r\n\t\tfor el in range(len(allElements)-1, -1, -1):\r\n\t\t\tdoc.Delete(allElements[el].Id)\r\n\t\t\tdoc.Regenerate()\r\n\t\r\n\t# Create Walls based on sizes\r\n\tpoint1 = XYZ(0, 0, 0)\r\n\tpoint2 = XYZ(revitApiLength, 0, 0)\r\n\tpoint3 = XYZ(revitApiLength, revitApiWidth, 0)\r\n\tpoint4 = XYZ(0, revitApiWidth, 0)\r\n\t\r\n\t# Create 4 Line/Curve for 4 Walls\r\n\tline1 = Autodesk.Revit.DB.Line.CreateBound(point1, point2)\r\n\tline2 = Autodesk.Revit.DB.Line.CreateBound(point2, point3)\r\n\tline3 = Autodesk.Revit.DB.Line.CreateBound(point3, point4)\r\n\tline4 = Autodesk.Revit.DB.Line.CreateBound(point4, point1)\r\n\twall1 = Autodesk.Revit.DB.Wall.Create(doc, line1, wallType.Id, levelEG.Id, numberOfLevels * revitApiWallHeight, -revitApiPlatformHeight, False, False)\r\n\twall2 = Autodesk.Revit.DB.Wall.Create(doc, line2, wallType.Id, levelEG.Id, numberOfLevels * revitApiWallHeight, -revitApiPlatformHeight, False, False)\r\n\twall3 = Autodesk.Revit.DB.Wall.Create(doc, line3, wallType.Id, levelEG.Id, numberOfLevels * revitApiWallHeight, -revitApiPlatformHeight, False, False)\r\n\twall4 = Autodesk.Revit.DB.Wall.Create(doc, line4, wallType.Id, levelEG.Id, numberOfLevels * revitApiWallHeight, -revitApiPlatformHeight, False, False)\r\n\twallList = [wall1, wall2, wall3, wall4]\r\n\t\r\n\t# Base Level Floor creation\r\n\tfloorList = []\r\n\tcarray = CurveArray()\r\n\tcarray.Append(line1)\r\n\tcarray.Append(line2)\r\n\tcarray.Append(line3)\r\n\tcarray.Append(line4)\r\n\tfloor = doc.Create.NewFloor(carray, floorType, levelEG, False)\r\n\tfloor.GetParameters(\"Height Offset From Level\")[0].Set(-revitApiPlatformHeight)\r\n\tfloorList.append(floor)\r\n\t\r\n\t# Upper Level and their Floor creation based on numberOfLevels arg\r\n\tlevelList = []\r\n\tlevelList.append(levelEG)\r\n\tif numberOfLevels > 1:\r\n\t\tfor levelNumber in range(1, numberOfLevels):\r\n\t\t\tnewLevel = Autodesk.Revit.DB.Level.Create(doc, levelNumber * revitApiWallHeight)\r\n\t\t\tlevelList.append(newLevel)\r\n\t\t\tlineF1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(point1.X, point1.Y, levelNumber*revitApiWallHeight), XYZ(point2.X, point2.Y, levelNumber*revitApiWallHeight))\r\n\t\t\tlineF2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(point2.X, point2.Y, levelNumber*revitApiWallHeight), XYZ(point3.X, point3.Y, levelNumber*revitApiWallHeight))\r\n\t\t\tlineF3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(point3.X, point3.Y, levelNumber*revitApiWallHeight), XYZ(point4.X, point4.Y, levelNumber*revitApiWallHeight))\r\n\t\t\tlineF4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(point4.X, point4.Y, levelNumber*revitApiWallHeight), XYZ(point1.X, point1.Y, levelNumber*revitApiWallHeight))\r\n\t\t\tcarray = CurveArray()\r\n\t\t\tcarray.Append(lineF1)\r\n\t\t\tcarray.Append(lineF2)\r\n\t\t\tcarray.Append(lineF3)\r\n\t\t\tcarray.Append(lineF4)\r\n\t\t\tnewFloor = doc.Create.NewFloor(carray, floorType, newLevel, False)\r\n\t\t\tfloorList.append(newFloor)\r\n\t\t\t\r\n\t\tlevelNumber += 1\r\n\t\tnewLevel = Autodesk.Revit.DB.Level.Create(doc, (levelNumber - 1) * revitApiWallHeight + UnitUtils.ConvertToInternalUnits(4.5, DisplayUnitType.DUT_METERS))\r\n\t\tlevelList.append(newLevel)\r\n\t\r\n\tbaseValueList = [length, width, platformHeight, platformWidth, wallHeight, wallThickness, trackLineCount, platformCount, columnRows, columnSpacing, numberOfLevels]\r\n\trevitApiBaseList = [revitApiLength, revitApiWidth, revitApiPlatformHeight, revitApiPlatformWidth, revitApiWallHeight, revitApiStairWidth, revitApiEscalatorWidth, revitApiEscalatorLength, revitApiElevatorLength]\r\n\televationList = [numberOfEscalators, numberOfStairs, escOrientation, elevatorPosition, elevatorLength, escalatorLength, escalatorWidth, stairWidth]\r\n\tlistList = [levelList, floorList, wallList, yAxisList, revitApiYAxisList, clearanceVariablesList]\r\n\tupperLevelList = [exitOffset, ticketXOffset, numberOfMachines, numberofExits]\r\n\ttrackDataList = [distTracks, distTrackPlatform, outerTrack, innerTracks, dangerZone, safetyStripPlatform]\r\n\t#End Transaction\r\n\tTransactionManager.Instance.TransactionTaskDone()\r\n\t# Assign your output to the OUT variable.\r\n\tOUT = [baseValueList, revitApiBaseList, elevationList, listList, upperLevelList, trackDataList, typeList, crowditList]\r\n\r\nelse:\r\n\tOUT = [[], [], [], [], [], [], [], []]\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b94ab649f1304a028e41b8d07f94707c",
      "Inputs": [
        {
          "Id": "3a011102234f42c4b74e9c62279d45f4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e154bc06cdbf4fef9360d5ce95419d27",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9a35393200549b8a4832dc9dae0dad0",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a2ad106d3c294f04b9e1d80d0aa92887",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5943cd6dee264bb4a36f9fb626bbf566",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0a9f101c21f54747ad313a47b414ef06",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0ab31926bb6a4dd0a5f99839ef8e237c",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb41d47510df402ba4184879b18665cd",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7af0da1fea204424a5e6e2b2f447c68e",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0d40eb4ae6bf428da5d97e8d0ea57ce7",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d28b5e53f4c74e919ffdb028890f0fd4",
          "Name": "IN[10]",
          "Description": "Input #10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f15be15f312a4fd5813e4b588e504fac",
          "Name": "IN[11]",
          "Description": "Input #11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb0739e1728a4df8b68c39af95e8bf2b",
          "Name": "IN[12]",
          "Description": "Input #12",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4eb00c5d8c5349a7bc8c29c8fb622773",
          "Name": "IN[13]",
          "Description": "Input #13",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "905a14a04b0046599157d19ffedc3987",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.StructuralColumnTypes, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "600 x 750mm",
      "NodeType": "ExtensionNode",
      "Id": "d7a859123a084f57bf9f6c049349a8b5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "902a109168e44eb5b2a8fb7d3f1f9533",
          "Name": "Column Types",
          "Description": "The selected Column Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a structural column type in the active document"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 21,
      "SelectedString": "IC_Destination_withL:IC_Destination_withL",
      "NodeType": "ExtensionNode",
      "Id": "066869354e7b44b8a9563afcbb0780e0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a82ac3fd98cb4b90acc377a917e51dd0",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsAtLevel, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "b5296ebfad454f98b72cc564ba0e8214",
      "Inputs": [
        {
          "Id": "e2e02ee2610e403caa4a41a8023cd8f3",
          "Name": "Level",
          "Description": "A Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bfa9577467c6426a9ceac6e10c957b9a",
          "Name": "Elements",
          "Description": "Elements at the given level.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all the elements at the specified Level from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "b946a6d5f8134cbd98d05f5965d1fa06",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "69b0de06bd7448e4b6129fb0771528f2",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 2,
      "MaximumValue": 2,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "d81e3a3ec50544a4a711c14418961e25",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ad86877859104ddf97f25650d09add30",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 19,
      "SelectedString": "Construction-Escalator_2:FT-01 bis 12 - 30°",
      "NodeType": "ExtensionNode",
      "Id": "a546ad92001346f5bb198c55452494d8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "53c04e998cc340c2a5ffd57985de6635",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FloorTypes, DSRevitNodesUI",
      "SelectedIndex": 1,
      "SelectedString": "STB 20.0",
      "NodeType": "ExtensionNode",
      "Id": "52c8935a887d4c54825856a370029332",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e18afde8abd74940bd2c66f9ea6ebf89",
          "Name": "Floor Type",
          "Description": "The selected Floor Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All floor types available in the document."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport clr\r\nimport math\r\nfrom math import ceil\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#Import Revit Nodes\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Import RevitAPI\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Architecture import *\r\n\r\n# Import DocumentManager and TransactionManager\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# Function to rotate a family instance around the z-axis\r\ndef ZRotateInstance(angle, instance, point):\r\n\tpoint2 = XYZ(point.X, point.Y, point.Z+10)\r\n\trotationLine = Line.CreateBound(point, point2)\r\n\trotated = instance.Location.Rotate(rotationLine, angle)\r\n\r\n\r\n# custom:\r\nonlyExport = IN[1]\r\nif not onlyExport:\r\n\t# The inputs to this node are stored as a list in the IN variables.\r\n\t# Length - Width - height variables\r\n\tbaseValueList = IN[0][0]\r\n\tlength= baseValueList[0]\r\n\tplatformWidth = baseValueList[3]\r\n\twallThickness = baseValueList[5]\r\n\ttrackLineCount = baseValueList[6]\r\n\tplatformCount = baseValueList[7]\r\n\tcolumnRows = baseValueList[8]\r\n\tcolumnSpacing = baseValueList[9]\r\n\tnumberOfLevels = baseValueList[10]\r\n\t\r\n\trevitApiBaseList = IN[0][1]\r\n\trevitApiLength = revitApiBaseList[0]\r\n\trevitApiWidth = revitApiBaseList[1]\r\n\trevitApiPlatformHeight = revitApiBaseList[2]\r\n\trevitApiPlatformWidth = revitApiBaseList[3]\r\n\trevitApiWallHeight = revitApiBaseList[4]\r\n\trevitApiStairWidth = revitApiBaseList[5]\r\n\trevitApiEscalatorWidth = revitApiBaseList[6]\r\n\trevitApiEscalatorLength = revitApiBaseList[7]\r\n\trevitApiElevatorLength = revitApiBaseList[8]\r\n\t\r\n\televationList = IN[0][2]\r\n\tnumberOfEscalators = elevationList[0]\r\n\tnumberOfStairs = elevationList[1]\r\n\tescOrientation = elevationList[2]\r\n\televatorPosition = elevationList[3]\r\n\televatorLength = elevationList[4]\r\n\tescalatorLength = elevationList[5]\r\n\tescalatorWidth = elevationList[6]  \r\n\tstairWidth = elevationList[7]\r\n\t\r\n\tlistList = IN[0][3]\r\n\tlevelEG = UnwrapElement(listList[0][0])\r\n\tlevelList = UnwrapElement(listList[0])\r\n\tfloorList = UnwrapElement(listList[1])\r\n\twallList = listList[2]\r\n\tyAxisList = listList[3]\r\n\trevitApiYAxisList = listList[4]\r\n\tclearanceVariablesList = listList[5]\r\n\t\r\n\tupperLevelList = IN[0][4]\r\n\texitXOffset = upperLevelList[0]\r\n\tticketXOffset = upperLevelList[1]\r\n\tnrOfMachines = upperLevelList[2]\r\n\tnumberOfExits = upperLevelList[3]\r\n\t\r\n\ttrackDataList = IN[0][5]\r\n\tdistTracks = trackDataList[0]\r\n\tdistTrackPlatform = trackDataList[1]\r\n\tinnerTracks = trackDataList[3]\r\n\tsafetyStripWidth = trackDataList[5]\r\n\t\r\n\ttypeList = IN[0][6]\r\n\tfloorType = UnwrapElement(typeList[0])\r\n\twallType = UnwrapElement(typeList[1])\r\n\tcolumnType = UnwrapElement(typeList[2])\r\n\tstairType = UnwrapElement(typeList[3])\r\n\tescalatorType = UnwrapElement(typeList[4])\r\n\ttrainType = UnwrapElement(typeList[5])\r\n\ttrainWallType = UnwrapElement(typeList[6])\r\n\tatmType = UnwrapElement(typeList[7])\r\n\tticketType = UnwrapElement(typeList[8])\r\n\tstoreType = UnwrapElement(typeList[9])\r\n\tvalidatorType = UnwrapElement(typeList[10])\r\n\t\r\n\tnumberOfAgents = IN[0][7][0]\r\n\ttreadWidth = IN[0][7][1]\r\n\t\r\n\tescExitClearance = clearanceVariablesList[0]\t\t#[m] DIN EN 115-1 \r\n\tstairExitClearance = clearanceVariablesList[1]\t\t#[m] Ril.813.0202 5(5)\r\n\televatorExitClearance = clearanceVariablesList[2]\t#[m] Ril.813.0202 7(5)\r\n\tminPathWidth = clearanceVariablesList[3]\t\t\t#[m] Ril.813.0202 4(3)\r\n\t\r\n\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t#Start Transaction\r\n\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\r\n\t# Place your code below this line\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\t# Track Lines\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\ttrainList = []\r\n\ttrainPartLength = UnitUtils.ConvertFromInternalUnits(trainType.LookupParameter(\"length\").AsDouble(), DisplayUnitType.DUT_METERS)+0.5 #0.5 for Distance between waggons\r\n\trotationAngle = math.pi\r\n\t\r\n\t#calculate waggon count\r\n\ttrainPartCount = int(length / trainPartLength)\r\n\ttrainLength = trainPartCount * trainPartLength\r\n\t\r\n\tif length - 1 <= trainLength:\r\n\t\ttrainPartCount -= 1\r\n\t\ttrainLength = trainPartCount * trainPartLength\r\n\t\t\r\n\tplacementMargin = (length - trainLength) / 2\r\n\t\r\n\t# Track line Y Axis Coordinates Calculation\r\n\tyAxisOfTrackLineCoordinateList = []\r\n\tfor indexY in range( platformCount):\r\n\t\tyAxis = yAxisList[indexY] - min(indexY,1)*distTracks\r\n\t\tyAxisOfTrackLineCoordinateList.append(yAxis)\r\n\t\tif indexY > 0 :\r\n\t\t\tsecondMiddleTrack = yAxis + distTracks\r\n\t\t\tyAxisOfTrackLineCoordinateList.append(secondMiddleTrack)\r\n\t\t\tyAxisWall = secondMiddleTrack - innerTracks/2\r\n\t\t\trevitApiYAxisWall = UnitUtils.ConvertToInternalUnits(yAxisWall, DisplayUnitType.DUT_METERS)\r\n\t\t\trevitApiInterWallHeight = UnitUtils.ConvertToInternalUnits(1.5, DisplayUnitType.DUT_METERS)\r\n\t\t\tpoint1 = XYZ(0, revitApiYAxisWall, 0)\r\n\t\t\tpoint2 = XYZ(revitApiLength, revitApiYAxisWall, 0)\r\n\t\t\tline1 = Autodesk.Revit.DB.Line.CreateBound(point1, point2)\r\n\t\t\tAutodesk.Revit.DB.Wall.Create(doc, line1, wallType.Id, levelEG.Id, revitApiInterWallHeight, -revitApiPlatformHeight, False, False)\r\n\tif trackLineCount%2 == 0:\r\n\t\tif trackLineCount == 2:\r\n\t\t\tyAxis =  yAxis + platformWidth + innerTracks - distTracks\r\n\t\t\tyAxisOfTrackLineCoordinateList.append(yAxis)\r\n\t\telse:\r\n\t\t\tyAxis =  yAxis + platformWidth + innerTracks\r\n\t\t\tyAxisOfTrackLineCoordinateList.append(yAxis)\r\n\t\r\n\tcounter = 0\r\n\t# Track Line Creation\r\n\tfor yAxis in yAxisOfTrackLineCoordinateList:\t\r\n\t\ttrainYAxis = UnitUtils.ConvertToInternalUnits(yAxis, DisplayUnitType.DUT_METERS) \r\n\t\t\r\n\t\tfor index in range(1,trainPartCount+1,1): \r\n\t\t\txAxis = index * trainPartLength - trainPartLength + placementMargin\r\n\t\t\trevitApiXAxis = UnitUtils.ConvertToInternalUnits(xAxis, DisplayUnitType.DUT_METERS)\r\n\t\t\t# Train Creation\r\n\t\t\ttrainPoint = XYZ(revitApiXAxis, trainYAxis + UnitUtils.ConvertToInternalUnits(-distTrackPlatform, DisplayUnitType.DUT_METERS), -revitApiPlatformHeight)\r\n\t\t\t\r\n\t\t\ttrain = doc.Create.NewFamilyInstance(trainPoint, trainType, levelEG, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\ttrain.LookupParameter(\"accu_rate_type\").Set(\"Origin\")\r\n\t\t\ttrain.LookupParameter(\"Number_Of_Agents\").Set(numberOfAgents)\r\n\t\t\t\t\r\n\t\t\ttrainWall = doc.Create.NewFamilyInstance(trainPoint, trainWallType, levelEG, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\ttrainWall.LookupParameter(\"IfcExportAs\").Set(\"IfcWall\")\r\n\t\t\t\r\n\t\t\tif counter%2 == 0:\r\n\t\t\t\trotationTrainPoint = XYZ(revitApiXAxis + UnitUtils.ConvertToInternalUnits(trainPartLength/2, DisplayUnitType.DUT_METERS), trainYAxis + UnitUtils.ConvertToInternalUnits(-distTrackPlatform, DisplayUnitType.DUT_METERS), 0)\r\n\t\t\t\tZRotateInstance(rotationAngle, train,  rotationTrainPoint)\r\n\t\t\t\tZRotateInstance(rotationAngle, trainWall, rotationTrainPoint)\r\n\t\t\twrapTrain = train.ToDSType(False)\t\t\t\r\n\t\t\ttrainList.append(wrapTrain)\r\n\t\tcounter = counter + 1\t\r\n\t\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\t# Platforms\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\tfor yAxis in revitApiYAxisList:\r\n\t\tpoint1 = XYZ(0, yAxis, 0)\r\n\t\tpoint2 = XYZ(revitApiLength, yAxis, 0)\r\n\t\tpoint3 = XYZ(revitApiLength, yAxis + revitApiPlatformWidth, 0)\r\n\t\tpoint4 = XYZ(0, yAxis + revitApiPlatformWidth, 0)\r\n\t\t\r\n\t\tline1 = Autodesk.Revit.DB.Line.CreateBound(point1, point2)\r\n\t\tline2 = Autodesk.Revit.DB.Line.CreateBound(point2, point3)\r\n\t\tline3 = Autodesk.Revit.DB.Line.CreateBound(point3, point4)\r\n\t\tline4 = Autodesk.Revit.DB.Line.CreateBound(point4, point1)\r\n\t\t\r\n\t\tcarray = CurveArray()\r\n\t\tcarray.Append(line1)\r\n\t\tcarray.Append(line2)\r\n\t\tcarray.Append(line3)\r\n\t\tcarray.Append(line4)\r\n\t\tfloor = doc.Create.NewFloor(carray, floorType, levelEG, False)\r\n\t\tfloor.GetParameters(\"Height Offset From Level\")[0].Set(0)\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\t# Elevators and Stairs\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\tescalatorList = []\r\n\tholeList = []\r\n\t#Offset to yAxis\r\n\tminDistToEdge = (platformWidth - escalatorWidth * numberOfEscalators - stairWidth * numberOfStairs)/2 #assures centered placement if ElevatorWidth was the decisive size after guidelines\r\n\t\r\n\t#xAxis Centered\r\n\txAxisCenter = length/2\r\n\t\r\n\t# Parameters for lower escalator positioning (dependant on elevator position)\r\n\tif elevatorPosition == 1: \t#left\r\n\t\txAxisEscalator =  minPathWidth + escExitClearance + wallThickness/2# +- for both sides; Wallthickness/2 because it referrs to wall axis\r\n\t\txAxisCenter += elevatorLength\r\n\t\toccupiedXSpaceElevator = (0,elevatorLength + elevatorExitClearance + wallThickness/2)\r\n\telif elevatorPosition == 2:\t#middle\r\n\t\txAxisEscalator = elevatorLength/2 + elevatorExitClearance + minPathWidth + escExitClearance + wallThickness/2 # +- for both sides\r\n\t\toccupiedXSpaceElevator = (xAxisCenter - elevatorLength/2 - elevatorExitClearance - minPathWidth, xAxisCenter + elevatorLength/2 + elevatorExitClearance + minPathWidth)\r\n\telif elevatorPosition == 3:\t#right\r\n\t\txAxisEscalator =  minPathWidth + escExitClearance + wallThickness/2\r\n\t\txAxisCenter -= elevatorLength\t\r\n\t\toccupiedXSpaceElevator = (length - elevatorLength - elevatorExitClearance - wallThickness/2, length)\t\r\n\t\r\n\t# Parameters dependant on escalator orientation (True: Facing Inwards; False: Outwards)\r\n\tif escOrientation:\r\n\t\trevitApiOrientationOffsetLeft = 0\r\n\t\trevitApiOrientationOffsetRight = revitApiEscalatorWidth\r\n\t\trotationAngle = 0\r\n\t\twallOrientation = 1\r\n\telse:\r\n\t\trevitApiOrientationOffsetLeft = revitApiEscalatorWidth\r\n\t\trevitApiOrientationOffsetRight = 0\r\n\t\trotationAngle = math.pi\r\n\t\twallOrientation = -1\r\n\t\txAxisEscalator += escalatorLength \r\n\t\r\n\trevitApiEscalatorXStartRight = UnitUtils.ConvertToInternalUnits(xAxisCenter + xAxisEscalator, DisplayUnitType.DUT_METERS)\r\n\trevitApiEscalatorXStartLeft  = UnitUtils.ConvertToInternalUnits(xAxisCenter - xAxisEscalator, DisplayUnitType.DUT_METERS)\r\n\t\r\n\t# Placements\r\n\tfor yIndex in range(platformCount):\r\n\t\tyAxis = yAxisList[yIndex] # Bottom Edge of the Platform #PlatformyAxis\r\n\t\tescalatorYStart = yAxis+ minDistToEdge \t\t\t\t\t\t \r\n\t\trevitApiEscalatorYStart = UnitUtils.ConvertToInternalUnits(escalatorYStart, DisplayUnitType.DUT_METERS)\r\n\t\t\r\n\t# Elevators\r\n\t\t# Start is bottom left point\r\n\t\tif elevatorPosition == 1:\r\n\t\t\trevitApiElevatorXStart = 0\t\r\n\t\telif elevatorPosition == 2:\r\n\t\t\trevitApiElevatorXStart = revitApiLength/2 - revitApiElevatorLength/2\r\n\t\telif elevatorPosition == 3: \r\n\t\t\trevitApiElevatorXStart = revitApiLength - revitApiElevatorLength\r\n\t\t\t\t\t\r\n\t\t# place the elevator in the middle of the platform\r\n\t\trevitApiDistanceToPlatformAxis = (revitApiPlatformWidth - revitApiElevatorLength)/2\t\t\t\t\t\t\t\t\t\t\r\n\t\trevitApiElevatorYStart = UnitUtils.ConvertToInternalUnits(yAxis, DisplayUnitType.DUT_METERS) + revitApiDistanceToPlatformAxis\r\n\t\t\t\t\r\n\t\t# Create Elevator walls \r\n\t\tpoint1 = XYZ(revitApiElevatorXStart, revitApiElevatorYStart, 0)\r\n\t\tpoint2 = XYZ(revitApiElevatorXStart + revitApiElevatorLength, revitApiElevatorYStart, 0)\r\n\t\tpoint3 = XYZ(revitApiElevatorXStart, revitApiElevatorYStart + revitApiElevatorLength, 0)\r\n\t\tpoint4 = XYZ(revitApiElevatorXStart + revitApiElevatorLength, revitApiElevatorYStart + revitApiElevatorLength, 0)\r\n\t\t\r\n\t\tline1 = Autodesk.Revit.DB.Line.CreateBound(point1, point2)\r\n\t\tline2 = Autodesk.Revit.DB.Line.CreateBound(point1, point3)\r\n\t\tline3 = Autodesk.Revit.DB.Line.CreateBound(point2, point4)\r\n\t\tline4 = Autodesk.Revit.DB.Line.CreateBound(point3, point4)\r\n\t\t\r\n\t\twall1 = Autodesk.Revit.DB.Wall.Create(doc, line1, wallType.Id, levelList[0].Id, (revitApiWallHeight*numberOfLevels)-revitApiPlatformHeight, -revitApiPlatformHeight, False, False)\r\n\t\twall2 = Autodesk.Revit.DB.Wall.Create(doc, line2, wallType.Id, levelList[0].Id, (revitApiWallHeight*numberOfLevels)-revitApiPlatformHeight, -revitApiPlatformHeight, False, False)\r\n\t\twall3 = Autodesk.Revit.DB.Wall.Create(doc, line3, wallType.Id, levelList[0].Id, (revitApiWallHeight*numberOfLevels)-revitApiPlatformHeight, -revitApiPlatformHeight, False, False)\r\n\t\twall4 = Autodesk.Revit.DB.Wall.Create(doc, line4, wallType.Id, levelList[0].Id, (revitApiWallHeight*numberOfLevels)-revitApiPlatformHeight, -revitApiPlatformHeight, False, False)\r\n\t\r\n\t\t#Opening\r\n\t\tif numberOfLevels > 1:\r\n\t\t\tcarray = CurveArray()\r\n\t\t\tcarray.Append(line1)\r\n\t\t\tcarray.Append(line2)\r\n\t\t\tcarray.Append(line3)\r\n\t\t\tcarray.Append(line4)\t\r\n\t\tfor level in range(1, numberOfLevels):\r\n\t\t\topening = doc.Create.NewOpening(floorList[level], carray, False)\r\n\t\t\r\n\t#Escalators\r\n\t\tfor level in range(0,numberOfLevels - 1):\r\n\t\t\tfor number in range(0, numberOfEscalators):\r\n\t\t\t\t#left\r\n\t\t\t\tescPoint = XYZ(revitApiEscalatorXStartLeft ,revitApiEscalatorYStart + revitApiOrientationOffsetLeft , revitApiPlatformHeight + level * revitApiWallHeight)\r\n\t\t\t\tescalator = doc.Create.NewFamilyInstance(escPoint, escalatorType, levelList[level], Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tescalatorList.append(escalator)\r\n\t\t\t\tZRotateInstance((math.pi/2) + rotationAngle, escalator, escPoint)\r\n\t\t\t\t\r\n\t\t\t\t#right\r\n\t\t\t\tescPoint = XYZ(revitApiEscalatorXStartRight ,revitApiEscalatorYStart + revitApiOrientationOffsetRight , revitApiPlatformHeight + level * revitApiWallHeight)\r\n\t\t\t\tescalator = doc.Create.NewFamilyInstance(escPoint, escalatorType, levelList[level], Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tescalatorList.append(escalator)\r\n\t\t\t\tZRotateInstance((-math.pi/2) + rotationAngle, escalator, escPoint)\r\n\t\t\t\t\r\n\t\t\t\t#offset for next iteration\r\n\t\t\t\trevitApiEscalatorYStart += revitApiEscalatorWidth\r\n\t\t\r\n\t\t\t\t#Stairs\r\n\t\t\t\tif (number == numberOfEscalators - 1) and (numberOfStairs > 0):\t\t\r\n\t\t\t\t\t#left\r\n\t\t\t\t\tstairPoint = XYZ(revitApiEscalatorXStartLeft, revitApiEscalatorYStart + revitApiStairWidth /2 , revitApiPlatformHeight + level * revitApiWallHeight)\r\n\t\t\t\t\tstairs = doc.Create.NewFamilyInstance(stairPoint, stairType, levelList[level], Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\t\tstairs.GetParameters(\"Top Offset\")[0].Set(revitApiWallHeight)\r\n\t\t\t\t\tstairs.GetParameters(\"Step Width\")[0].Set(revitApiStairWidth)\r\n\t\t\t\t\tstairs.LookupParameter(\"accu_rate_type\").Set(\"Stair\")\r\n\t\t\t\t\tZRotateInstance(math.pi*2.5 + rotationAngle, stairs, stairPoint)\r\n\t\t\t\t\tdelta = revitApiEscalatorLength - stairs.LookupParameter(\"Run Length\").AsDouble()\r\n\t\t\t\t\tElementTransformUtils.MoveElement(doc, stairs.Id, XYZ(-delta * wallOrientation, 0 , 0))\t\t\t\r\n\t\t\t\t\t#right\r\n\t\t\t\t\tstairPoint = XYZ(revitApiEscalatorXStartRight + delta * wallOrientation, revitApiEscalatorYStart + revitApiStairWidth /2 , revitApiPlatformHeight + level * revitApiWallHeight)\r\n\t\t\t\t\tstairs = doc.Create.NewFamilyInstance(stairPoint, stairType, levelList[level], Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\t\tstairs.GetParameters(\"Top Offset\")[0].Set(revitApiWallHeight)\r\n\t\t\t\t\tstairs.GetParameters(\"Step Width\")[0].Set(revitApiStairWidth)\r\n\t\t\t\t\tstairs.LookupParameter(\"accu_rate_type\").Set(\"Stair\")\r\n\t\t\t\t\tZRotateInstance(math.pi*1.5 + rotationAngle, stairs, stairPoint)\r\n\t\t\t\telse:\r\n\t\t\t\t\tdelta = 0\r\n\t\r\n\t\t\trevitApiEscalatorYStart -= revitApiEscalatorWidth*numberOfEscalators\t\r\n\t\t\t\r\n\t\t#Holes for the Escalators\r\n\t\tfor level in range(1, numberOfLevels):\r\n\t\t\tholeYStart = revitApiEscalatorYStart \r\n\t\t\tholeYEnd = revitApiEscalatorYStart + numberOfEscalators * revitApiEscalatorWidth + numberOfStairs * revitApiStairWidth\r\n\t\t\tif level == numberOfLevels -1:\r\n\t\t\t\tnumberOfStairs2 = 0\r\n\t\t\t\tdelta = 0\r\n\t\t\telse:\r\n\t\t\t\tnumberOfStairs2 = numberOfStairs\r\n\t\t\t#left\r\n\t\t\tholePoint1 = XYZ(revitApiEscalatorXStartLeft, holeYStart, level * revitApiWallHeight)\r\n\t\t\tholePoint2 = XYZ(revitApiEscalatorXStartLeft - revitApiEscalatorLength * wallOrientation, holeYStart, level * revitApiWallHeight)\r\n\t\t\tholePoint3 = XYZ(revitApiEscalatorXStartLeft - revitApiEscalatorLength * wallOrientation, holeYEnd , level * revitApiWallHeight)\r\n\t\t\tholePoint4 = XYZ(revitApiEscalatorXStartLeft - delta * wallOrientation, holeYEnd, level * revitApiWallHeight)\r\n\t\t\tholePoint5 = XYZ(revitApiEscalatorXStartLeft - delta * wallOrientation, holeYEnd - numberOfStairs2 * revitApiStairWidth, level * revitApiWallHeight)\r\n\t\t\tholePoint6 = XYZ(revitApiEscalatorXStartLeft, holeYEnd - numberOfStairs2 * revitApiStairWidth, level * revitApiWallHeight)\r\n\t\t\t\r\n\t\t\tholeLine1 = Autodesk.Revit.DB.Line.CreateBound(holePoint1, holePoint2)\r\n\t\t\tholeLine2 = Autodesk.Revit.DB.Line.CreateBound(holePoint2, holePoint3)\r\n\t\t\tholeLine3 = Autodesk.Revit.DB.Line.CreateBound(holePoint3, holePoint4)\r\n\t\t\tif numberOfStairs == 1 and level < numberOfLevels -1:\r\n\t\t\t\tholeLine4 = Autodesk.Revit.DB.Line.CreateBound(holePoint4, holePoint5)\r\n\t\t\t\tholeLine5 = Autodesk.Revit.DB.Line.CreateBound(holePoint5, holePoint6)\r\n\t\t\tholeLine6 = Autodesk.Revit.DB.Line.CreateBound(holePoint6, holePoint1)\r\n\t\t\t\r\n\t\t\tcarray = CurveArray()\t\r\n\t\t\tcarray.Append(holeLine1)\r\n\t\t\tcarray.Append(holeLine2)\r\n\t\t\tcarray.Append(holeLine3)\r\n\t\t\tif numberOfStairs == 1 and level < numberOfLevels -1:\r\n\t\t\t\tcarray.Append(holeLine4)\r\n\t\t\t\tcarray.Append(holeLine5)\r\n\t\t\tcarray.Append(holeLine6)\r\n\t\t\tdoc.Create.NewOpening(floorList[level], carray, False)\r\n\t\t\tholeList.append(carray)\r\n\t\t\t#right \r\n\t\t\tholePoint1 = XYZ(revitApiEscalatorXStartRight, holeYStart, level * revitApiWallHeight)\r\n\t\t\tholePoint2 = XYZ(revitApiEscalatorXStartRight + revitApiEscalatorLength * wallOrientation, holeYStart, level * revitApiWallHeight)\r\n\t\t\tholePoint3 = XYZ(revitApiEscalatorXStartRight + revitApiEscalatorLength * wallOrientation, holeYEnd , level * revitApiWallHeight)\r\n\t\t\tholePoint4 = XYZ(revitApiEscalatorXStartRight + delta * wallOrientation, holeYEnd, level * revitApiWallHeight)\r\n\t\t\tholePoint5 = XYZ(revitApiEscalatorXStartRight + delta * wallOrientation, holeYEnd - numberOfStairs2 * revitApiStairWidth, level * revitApiWallHeight)\r\n\t\t\tholePoint6 = XYZ(revitApiEscalatorXStartRight, holeYEnd - numberOfStairs2 * revitApiStairWidth, level * revitApiWallHeight)\r\n\t\t\t\r\n\t\t\tholeLine1 = Autodesk.Revit.DB.Line.CreateBound(holePoint1, holePoint2)\r\n\t\t\tholeLine2 = Autodesk.Revit.DB.Line.CreateBound(holePoint2, holePoint3)\r\n\t\t\tholeLine3 = Autodesk.Revit.DB.Line.CreateBound(holePoint3, holePoint4)\r\n\t\t\tif numberOfStairs == 1 and level < numberOfLevels -1:\r\n\t\t\t\tholeLine4 = Autodesk.Revit.DB.Line.CreateBound(holePoint4, holePoint5)\r\n\t\t\t\tholeLine5 = Autodesk.Revit.DB.Line.CreateBound(holePoint5, holePoint6)\r\n\t\t\tholeLine6 = Autodesk.Revit.DB.Line.CreateBound(holePoint6, holePoint1)\r\n\t\t\t\r\n\t\t\tcarray = CurveArray()\r\n\t\t\tcarray.Append(holeLine1)\r\n\t\t\tcarray.Append(holeLine2)\r\n\t\t\tcarray.Append(holeLine3)\r\n\t\t\tif numberOfStairs == 1 and level < numberOfLevels -1:\r\n\t\t\t\tcarray.Append(holeLine4)\r\n\t\t\t\tcarray.Append(holeLine5)\r\n\t\t\tcarray.Append(holeLine6)\r\n\t\t\tdoc.Create.NewOpening(floorList[level], carray, False)\r\n\t\t\tholeList.append(carray)\r\n\t# Escalator parameter\r\n\tfor escalator in escalatorList:\r\n\t\tescalator.GetParameters(\"Top Offset\")[0].Set(revitApiWallHeight)\r\n\t\tescalator.LookupParameter(\"accu_rate_type\").Set(\"Escalator\")\r\n\t\tescalator.LookupParameter(\"tread_width\").Set(treadWidth)\r\n\t\tescalator.LookupParameter(\"Lower Arrow\").Set(0)\r\n\t\tescalator.LookupParameter(\"Upper Arrow\").Set(0)\r\n\t\tescalator.LookupParameter(\"Clearence\").Set(0)\r\n\t# for columns \r\n\tif escOrientation:\r\n\t\toccupiedXSpaceEscalatorRight =  (xAxisCenter + xAxisEscalator - escExitClearance, xAxisCenter +  xAxisEscalator + escalatorLength)\r\n\t\toccupiedXSpaceEscalatorLeft = (xAxisCenter - xAxisEscalator - escalatorLength, xAxisCenter - xAxisEscalator + escExitClearance)\r\n\telse:\r\n\t\toccupiedXSpaceEscalatorLeft =  (xAxisCenter - xAxisEscalator - escExitClearance, xAxisCenter -  xAxisEscalator + escalatorLength)\r\n\t\toccupiedXSpaceEscalatorRight = (xAxisCenter + xAxisEscalator - escalatorLength, xAxisCenter + xAxisEscalator + escExitClearance)\r\n\toccupiedXSpacesList = [occupiedXSpaceElevator, occupiedXSpaceEscalatorLeft, occupiedXSpaceEscalatorRight]\r\n\t\r\n\toccupiedYSpacesEscalator = (minDistToEdge, platformWidth - minDistToEdge)\r\n\toccupiedYSpaceElevator = (platformWidth/2 - elevatorLength/2, platformWidth/2 + elevatorLength/2)\r\n\toccupiedYSpacesList = [occupiedYSpaceElevator, occupiedYSpacesEscalator]\r\n\t\r\n\t# place walls around the escalator holes platformCount*numberOfLevels\r\n\tif numberOfLevels ==4:\r\n\t\thList = holeList[numberOfLevels::(numberOfLevels-1)*2] + holeList[numberOfLevels+1::(numberOfLevels-1)*2]\r\n\telif numberOfLevels == 3:\r\n\t\thList = holeList[numberOfLevels::(numberOfLevels-1)*2] + holeList[numberOfLevels-1::(numberOfLevels-1)*2]\r\n\telse:\r\n\t\thList = holeList\r\n\t\r\n\tfor carray in hList:\r\n\t\t# don't place walls in front if the escalator\r\n\t\tfor i in range(0, 4):\r\n\t\t\tfor k in range(1, numberOfLevels):\r\n\t\t\t\tlevel2 = UnwrapElement(levelList[k])\r\n\t\t\t\tif (i == 3 and escOrientation == 1 and k == numberOfLevels -1) or (i == 3 and escOrientation == 0 and k == numberOfLevels -1) or i ==2 or i==0:\r\n\t\t\t\t\tline = carray[i]\r\n\t\t\t\t\twall = Autodesk.Revit.DB.Wall.Create(doc, line, wallType.Id, level2.Id, 3.3, 0, False, False)\r\n\t\t\t\t\tif i == 2:\r\n\t\t\t\t\t\twall.Location.Move(XYZ(0, wallType.Width/2, 0))\r\n\t\t\t\t\telif i == 0:\r\n\t\t\t\t\t\twall.Location.Move(XYZ(0, -wallType.Width/2, 0))\t\t\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\t#columns\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\tcolumnWidth = 0.75 #[m]\r\n\tsafetyStripWidth += (0.9 + columnWidth/2) # 0.9 m Ril 813.0201A04 3(3) for small obstacles\r\n\trevitApiFloorThickness = UnitUtils.ConvertToInternalUnits(0.2, DisplayUnitType.DUT_METERS)\r\n\t\r\n\tif columnRows > 0:\r\n\t\tcolumnCountLeft  = int( math.floor(xAxisCenter / columnSpacing)) #split because xAxisCenter not always in the middle and columns should be center orientated\r\n\t\tcolumnCountRight = int( math.floor((length - xAxisCenter)/ columnSpacing) + 1)\r\n\t\tcolumnStartX = xAxisCenter - columnCountLeft * columnSpacing\r\n\t\tcolumnXListBefore = []\r\n\t\tfor i in range(0,(columnCountLeft + columnCountRight)):\r\n\t\t\tcolumnXListBefore.append(i * columnSpacing + columnStartX)\r\n\t\r\n\t\t# Clash detection with occupiedYSpaces; only for escalators\r\n\t\toccupiedXSpacesColumnList = list(occupiedXSpacesList)\r\n\t\tif columnRows > 1:\r\n\t\t\tif occupiedYSpacesList[1][0] > (safetyStripWidth + columnWidth/2) and occupiedYSpacesList[1][1] > (platformCount - (safetyStripWidth + columnWidth/2)):\r\n\t\t\t\tdel occupiedXSpacesColumnList[1:3]\r\n\t\r\n\t\t# Clash detection with occupiedXSpaces\r\n\t\tcolumnXList = [] \r\n\t\tfor x in columnXListBefore:\r\n\t\t\ti = 0\r\n\t\t\tfor space in occupiedXSpacesColumnList:\r\n\t\t\t\tif not(x > space[0] and x < space[1]):\r\n\t\t\t\t\ti += 1\r\n\t\t\t\tif i == len(occupiedXSpacesColumnList):\r\n\t\t\t\t\tcolumnXList.append(x)\r\n\t\t# YAxis\r\n\t\tcolumnYList = []\r\n\t\tfor p in range(platformCount):\r\n\t\t\tif columnRows == 2:\r\n\t\t\t\tcolumnYList.append(yAxisList[p] + safetyStripWidth)\r\n\t\t\t\tcolumnYList.append(yAxisList[p] + platformWidth - safetyStripWidth)\r\n\t\t\telif columnRows == 1:\r\n\t\t\t\tcolumnYList.append(yAxisList[p] + platformWidth/2)\r\n\t\t\t\t\r\n\t\tfor x in columnXList:\r\n\t\t\tfor y in columnYList:\r\n\t\t\t\trevitApiX = UnitUtils.ConvertToInternalUnits(x, DisplayUnitType.DUT_METERS)\r\n\t\t\t\trevitApiY = UnitUtils.ConvertToInternalUnits(y, DisplayUnitType.DUT_METERS)\r\n\t\t\t\tbasePoint = XYZ(revitApiX, revitApiY, 0)\r\n\t\t\t\ttopHeight = revitApiWallHeight - revitApiFloorThickness\r\n\t\t\t\tcolumn = doc.Create.NewFamilyInstance(basePoint, columnType,  levelEG, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tcolumn.LookupParameter(\"Enable Analytical Model\").Set(0)\r\n\t\t\t\tcolumn.LookupParameter(\"Top Offset\").Set(topHeight)\r\n\t\t\t\tcolumn.LookupParameter(\"Top Level\").Set(levelEG.Id)\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\t#Top Decoration\r\n\t####################################################################################################################################################################################\r\n\t####################################################################################################################################################################################\r\n\trevitApiExitXOffset = UnitUtils.ConvertToInternalUnits(exitXOffset, DisplayUnitType.DUT_METERS)\r\n\trevitApiTicketXOffset = UnitUtils.ConvertToInternalUnits(ticketXOffset, DisplayUnitType.DUT_METERS)\r\n\trevitApiTicketWidth = UnitUtils.ConvertToInternalUnits(0.8, DisplayUnitType.DUT_METERS)\r\n\trevitApiStoreWidth = UnitUtils.ConvertToInternalUnits(5, DisplayUnitType.DUT_METERS)\r\n\trevitApiRailingHeight = UnitUtils.ConvertToInternalUnits(1.2, DisplayUnitType.DUT_METERS)\r\n\t\r\n\t# Define points where exits are inserted\r\n\texitPoint1 = XYZ(revitApiExitXOffset, UnitUtils.ConvertToInternalUnits(7, DisplayUnitType.DUT_METERS), 0)\t# 7m = exitOffset in Y = inwards\r\n\texitPoint2 = XYZ(revitApiLength - revitApiExitXOffset, UnitUtils.ConvertToInternalUnits(7, DisplayUnitType.DUT_METERS), 0)\r\n\texitPoint3 = XYZ(revitApiLength - revitApiExitXOffset - revitApiEscalatorWidth, revitApiWidth - UnitUtils.ConvertToInternalUnits(7, DisplayUnitType.DUT_METERS), 0)\r\n\texitPoint4 = XYZ(revitApiExitXOffset - revitApiEscalatorWidth, revitApiWidth - UnitUtils.ConvertToInternalUnits(7, DisplayUnitType.DUT_METERS), 0)\r\n\tpointList = [exitPoint1, exitPoint2, exitPoint3, exitPoint4]\r\n\t\t\r\n\t# Start the transaction\r\n\tdecorationList = []\r\n\tif numberOfLevels > 1:\r\n\t\ttopLevel = list(levelList)[-2]\r\n\t\t\r\n\t\t# Place ATMs\r\n\t\taPoint1 = XYZ(UnitUtils.ConvertToInternalUnits(xAxisCenter, DisplayUnitType.DUT_METERS), 1, 0)\r\n\t\taPoint2 = XYZ(UnitUtils.ConvertToInternalUnits(xAxisCenter, DisplayUnitType.DUT_METERS), revitApiWidth - 3, 0)\r\n\t\taPointList = [aPoint1, aPoint2]\r\n\t\tatm = doc.Create.NewFamilyInstance(aPoint1, atmType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\tdecorationList.append(atm)\r\n\t\tatm = doc.Create.NewFamilyInstance(aPoint2, atmType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\tdecorationList.append(atm)\r\n\t\t\r\n\t\t# Place TIcketmachines\r\n\t\tfor point in aPointList:\r\n\t\t\tfor machineNr in range(0, nrOfMachines):\r\n\t\t\t\tmPoint = XYZ(point.X - machineNr*revitApiTicketWidth + revitApiTicketXOffset, point.Y, point.Z)\r\n\t\t\t\tmachine = doc.Create.NewFamilyInstance(mPoint, ticketType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tdecorationList.append(machine)\r\n\t\t\tfor machineNr in range(0, nrOfMachines):\r\n\t\t\t\tmPoint = XYZ(point.X + machineNr*revitApiTicketWidth - revitApiTicketXOffset, point.Y, point.Z)\r\n\t\t\t\tmachine = doc.Create.NewFamilyInstance(mPoint, ticketType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tdecorationList.append(machine)\r\n\t\t\t\t\r\n\t\t# Place Ticketvalidators\r\n\t\tif escOrientation:\r\n\t\t\txLeft  = occupiedXSpacesList[1][0] - escExitClearance\r\n\t\t\txRight = occupiedXSpacesList[2][1] + escExitClearance\r\n\t\t\tyLeft  = [revitApiEscalatorWidth * i + UnitUtils.ConvertToInternalUnits(occupiedYSpacesList[1][0], DisplayUnitType.DUT_METERS) for i in range(numberOfEscalators + 1)]\r\n\t\t\tyRight = [revitApiEscalatorWidth * i + revitApiEscalatorWidth + UnitUtils.ConvertToInternalUnits(occupiedYSpacesList[1][0], DisplayUnitType.DUT_METERS) for i in range(numberOfEscalators)]\r\n\t\t\tyRight.append(yRight[-1] + revitApiStairWidth)\r\n\t\telse:\r\n\t\t\txLeft  = occupiedXSpacesList[1][1] + escExitClearance\r\n\t\t\txRight = occupiedXSpacesList[2][0] - escExitClearance\r\n\t\t\tyRight = [revitApiEscalatorWidth * i + UnitUtils.ConvertToInternalUnits(occupiedYSpacesList[1][0], DisplayUnitType.DUT_METERS) for i in range(numberOfEscalators + 1)]\r\n\t\t\tyLeft  = [revitApiEscalatorWidth * i + revitApiEscalatorWidth + UnitUtils.ConvertToInternalUnits(occupiedYSpacesList[1][0], DisplayUnitType.DUT_METERS) for i in range(numberOfEscalators)]\r\n\t\t\tyLeft.append(yLeft[-1] + revitApiStairWidth)\r\n\t\tif numberOfStairs == 0:\r\n\t\t\tdel yRight[-1]\r\n\t\t\tdel yLeft[-1]\r\n\t\tfor baseY in revitApiYAxisList:\t\r\n\t\t\tfor y in range(len(yLeft)):\r\n\t\t\t\tpointLeft  = XYZ(UnitUtils.ConvertToInternalUnits(xLeft , DisplayUnitType.DUT_METERS), yLeft[y]  + baseY, 0)\r\n\t\t\t\tpointRight = XYZ(UnitUtils.ConvertToInternalUnits(xRight, DisplayUnitType.DUT_METERS), yRight[y] + baseY, 0)\r\n\t\t\t\tvalidatorLeft  = doc.Create.NewFamilyInstance(pointLeft , validatorType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tvalidatorRight = doc.Create.NewFamilyInstance(pointRight, validatorType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tdecorationList.append(validatorLeft)\r\n\t\t\t\tdecorationList.append(validatorRight)\r\n\t\t\t\r\n\t\t# place escalators as exits + ticketmachines\r\n\t\tfor exitNumber in range(0, numberOfExits):\r\n\t\t\tescalator = doc.Create.NewFamilyInstance(pointList[exitNumber], escalatorType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\tescalator.LookupParameter(\"accu_rate_type\").Set(\"Escalator\")\r\n\t\t\tescalator.LookupParameter(\"tread_width\").Set(treadWidth)\r\n\t\t\tescalator.LookupParameter(\"Lower Arrow\").Set(0)\r\n\t\t\tescalator.LookupParameter(\"Upper Arrow\").Set(0)\r\n\t\t\tescalator.LookupParameter(\"Clearence\").Set(0)\r\n\t\t\t\r\n\t\t\tstairPoint = XYZ(pointList[exitNumber].X + revitApiStairWidth/2, pointList[exitNumber].Y, 0)\r\n\t\t\tstairs = doc.Create.NewFamilyInstance(stairPoint, stairType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\tstairs.GetParameters(\"Step Width\")[0].Set(revitApiStairWidth)\r\n\t\t\tstairs.LookupParameter(\"accu_rate_type\").Set(\"Stair\")\r\n\t\r\n\t\t\tdelta = (escalator.LookupParameter(\"Length\").AsDouble() - UnitUtils.ConvertToInternalUnits(1.7, DisplayUnitType.DUT_METERS)) #beginning of the surface slab (abs)\r\n\t\t\tsurfaceSlabMeasure = UnitUtils.ConvertToInternalUnits(6, DisplayUnitType.DUT_METERS) #Arbitrary\r\n\t\t\t\r\n\t\t\tif exitNumber<2:\t\r\n\t\t\t\tfloorYOffset  = - delta\r\n\t\t\t\tfloorYOffset2 = - surfaceSlabMeasure\r\n\t\t\t\tZRotateInstance(math.pi, escalator, pointList[exitNumber])\r\n\t\t\t\tZRotateInstance(math.pi, stairs, stairPoint)\r\n\t\t\t\tstairs.Location.Move(XYZ(0, floorYOffset + stairs.LookupParameter(\"Run Length\").AsDouble() , 0))\r\n\t\t\t\t\t\r\n\t\t\t\t#create the opening in the wall\r\n\t\t\t\to1 = XYZ(pointList[exitNumber].X + revitApiStairWidth, 0,  UnitUtils.ConvertToInternalUnits(1.17, DisplayUnitType.DUT_METERS) + revitApiWallHeight * (numberOfLevels - 1))\r\n\t\t\t\to2 = XYZ(pointList[exitNumber].X - revitApiEscalatorWidth, 0, UnitUtils.ConvertToInternalUnits(5, DisplayUnitType.DUT_METERS) + revitApiWallHeight * (numberOfLevels))\r\n\t\t\t\topening = doc.Create.NewOpening(UnwrapElement(wallList[0]), o1, o2)\r\n\t\t\t\t\r\n\t\t\t\t# place storebooths\r\n\t\t\t\tif exitNumber == 1:\r\n\t\t\t\t\tbpoint = XYZ(pointList[exitNumber].X - revitApiStoreWidth - revitApiEscalatorWidth - 30, 1, 0)\r\n\t\t\t\telse:\r\n\t\t\t\t\tbpoint = XYZ(pointList[exitNumber].X + revitApiEscalatorWidth + 30, 1, 0)\r\n\t\t\t\tstoreBooth = doc.Create.NewFamilyInstance(bpoint, storeType, topLevel, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\t\t\t\tdecorationList.append(storeBooth)\t\t\t\r\n\t\t\telse:\r\n\t\t\t\tfloorYOffset  = delta\r\n\t\t\t\tfloorYOffset2 = surfaceSlabMeasure\r\n\t\t\t\tstairs.Location.Move(XYZ(revitApiEscalatorWidth, floorYOffset - stairs.LookupParameter(\"Run Length\").AsDouble() , 0))\r\n\t\t\t\t\r\n\t\t\t\t#create the opening in the wall\r\n\t\t\t\to1 = XYZ(pointList[exitNumber].X, 0, UnitUtils.ConvertToInternalUnits(1, DisplayUnitType.DUT_METERS) + revitApiWallHeight * (numberOfLevels - 1))\r\n\t\t\t\to2 = XYZ(pointList[exitNumber].X + revitApiEscalatorWidth + revitApiStairWidth, 0, UnitUtils.ConvertToInternalUnits(5, DisplayUnitType.DUT_METERS) + revitApiWallHeight*(numberOfLevels))\r\n\t\t\t\topening = doc.Create.NewOpening(UnwrapElement(wallList[2]), o1, o2)\r\n\t\t\t\r\n\t\t\t#Surface slab\r\n\t\t\tpoint1 = XYZ(pointList[exitNumber].X - surfaceSlabMeasure, pointList[exitNumber].Y + floorYOffset, (numberOfLevels - 1) * revitApiWallHeight + UnitUtils.ConvertToInternalUnits(4.5, DisplayUnitType.DUT_METERS))\r\n\t\t\tpoint2 = XYZ(pointList[exitNumber].X + surfaceSlabMeasure, pointList[exitNumber].Y + floorYOffset, (numberOfLevels - 1) * revitApiWallHeight + UnitUtils.ConvertToInternalUnits(4.5, DisplayUnitType.DUT_METERS))\r\n\t\t\tpoint3 = XYZ(pointList[exitNumber].X + surfaceSlabMeasure, pointList[exitNumber].Y + floorYOffset + floorYOffset2, (numberOfLevels - 1) * revitApiWallHeight + UnitUtils.ConvertToInternalUnits(4.5, DisplayUnitType.DUT_METERS))\r\n\t\t\tpoint4 = XYZ(pointList[exitNumber].X - surfaceSlabMeasure, pointList[exitNumber].Y + floorYOffset + floorYOffset2, (numberOfLevels - 1) * revitApiWallHeight + UnitUtils.ConvertToInternalUnits(4.5, DisplayUnitType.DUT_METERS))\r\n\t\t\tline1 = Autodesk.Revit.DB.Line.CreateBound(point1, point2)\r\n\t\t\tline2 = Autodesk.Revit.DB.Line.CreateBound(point2, point3)\r\n\t\t\tline3 = Autodesk.Revit.DB.Line.CreateBound(point3, point4)\r\n\t\t\tline4 = Autodesk.Revit.DB.Line.CreateBound(point4, point1)\r\n\t\t\tcarray = CurveArray()\r\n\t\t\tcarray.Append(line1)\r\n\t\t\tcarray.Append(line2)\r\n\t\t\tcarray.Append(line3)\r\n\t\t\tcarray.Append(line4)\r\n\t\t\tfloor = doc.Create.NewFloor(carray, floorType, list(levelList)[-1], False)\r\n\t\t\tfloor.LookupParameter(\"accu_rate_type\").Set(\"Destination\")\t\r\n\t\r\n\t#End Transaction\r\n\tTransactionManager.Instance.TransactionTaskDone()\r\n\t# Assign your output to the OUT variable.\r\n\toutput = IN[0]\r\n\toutput[0].append(xAxisCenter)\r\n\toutput[3].append(occupiedXSpacesList)\r\n\toutput[3].append(occupiedYSpacesList)\r\n\toutput[3].append(decorationList)\r\n\tOUT = output\r\n\r\nelse:\r\n\tOUT = []\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "5e46294564674e7d8151f3a2a1c328fa",
      "Inputs": [
        {
          "Id": "08a597458f414f65a0f3d49535df3416",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "12753406870d409ca0e140d63db7303a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "19548bb122024254b787e58c96f9d4f3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# This script takes the langth of the train and converts it to a platform length, according to officlaa guidelines from DB\r\n# It doesn't include cases of locomotive-hauled trains\r\nlength = IN[0]\r\nterminus = IN[1]\r\nbumper = IN[2]\r\nstandard_length = IN[3]\r\ntrain_freq = IN[4]\r\n# stanard buffer-legnth is 5 (Maß  für ungenaues halten)\r\nbuffer = 5\r\n# Check if the station is a terminus\r\nif terminus == False:\r\n\tlength = length + buffer\r\nelse:\r\n\tlength = length + buffer + bumper\r\n\r\n# This check if the length is within a certain range\r\nif standard_length == True:\r\n\tif length >= 60 and length < 90:\r\n\t\tlength = 90\r\n\telif length >= 90 and length < 140:\r\n\t\tlength = 140\r\n\telif length >= 140 and length < 170:\r\n\t\tlength = 170\r\n\telif length >= 170 and length < 210:\r\n\t\tlength = 210\r\n\telif length >= 210 and length < 280:\r\n\t\tlength = 280\r\n\telif length >= 280 and length < 320:\r\n\t\tlength = 320\r\n\telif length >= 320 and length < 370:\r\n\t\tlength = 370\r\n\telif length >=370 and length < 405:\r\n\t\tlength = 405\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = length",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "6f587da72e1149979c6a2c4c9f2c0d40",
      "Inputs": [
        {
          "Id": "94736aca592a42159035118e9bd60aa0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd4dc8b63f5c4a7ab573e1e1ad4959e3",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c59e8c4b465d4d638cd2727b4e68dd34",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "66d99352aafb4c61b307f1b9d065a245",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7bd1986587e6453a93efc48ad8e4c674",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ed3a6a754c09495a88c4ef637f16388c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "f720c80e6f1d4f21bebdcb9555f2933e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6062cb01d866449c9a333bed72805252",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 115.0,
      "Id": "3cb6533b3fa5459f9123ae291f780de2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "abaaf6230eea490992861ca1bfdabf08",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 10.0,
      "Id": "2f3255ccafbc41a380f658fde805b3c4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "80de50804edc41adbea43dfcfe200c07",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "7b33e5c900614f629567cf0acb30494b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8a37c7b8b3534e6b9729f187e935e3f2",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Inputs\r\nv = IN[0]\r\nplatformHeight = IN[1]\r\nL_b = IN[2]\r\ntrafficLevel = IN[3]\r\nlocalTraffic = IN[4]\r\nnumberOfEscalators = IN[5]\r\nnumberOfStairs = IN[6]\r\nelevatorLength = IN[7]\r\nregional = IN[8]\r\n\r\nstairWidth = IN[13]\t#[m]\r\nescalatorWidth = IN[12]\r\nescalatorLength = 25 #[m]\r\n\r\n#########################################################################\r\n#########################################################################\r\n#functions\r\n#########################################################################\r\n#########################################################################\r\ndef checkDistances(length, width, bs, platformWidth):\r\n\tif length < 1:\r\n\t\tdist = 2*bs + 2*0.9\r\n\t\tif dist < 1.6:\r\n\t\t\tdist = 2\r\n\t\t\r\n\t\tif platformWidth < (width + dist):\r\n\t\t\tplatformWidth = (width + dist)\r\n\tif length > 1 and length <= 10:\r\n\t\tdist = 2*bs + 2*1.2\r\n\t\tif dist < 2:\r\n\t\t\tdist = 2\r\n\t\t\r\n\t\tif platformWidth < (width + dist):\r\n\t\t\tplatformWidth = (width + dist)\r\n\tif length > 10:\r\n\t\tdist = 2*bs + 2*1.6\r\n\t\tif dist < 2.4:\r\n\t\t\tdist = 2.4\r\n\t\t\r\n\t\tif platformWidth < (width + dist):\r\n\t\t\tplatformWidth = (width + dist)\r\n\treturn platformWidth\r\n#########################################################################\r\n#########################################################################\r\n#Width calculation\r\n#########################################################################\r\n#########################################################################\r\nif IN[10] == False:\r\n\t# Calculation \"Einbaumaß\" aBa, aBi (813.0201A03)\r\n\taBa = 1.7 #backup value\r\n\t\r\n\tif platformHeight == 0.960:\r\n\t\taBa = 1.685\r\n\telif platformHeight == 0.760:\r\n\t\taBa = 1.675\r\n\telif platformHeight == 0.550:\r\n\t\taBa = 1.670\r\n\telif platformHeight == 0.380:\r\n\t\taBa = 1.690\r\n\t# velocity check \"Gefahrenbereich\" (813.0201 3(9) )\r\n\tif v <= 160:\r\n\t\tbs = 2.5 - aBa\r\n\telif v > 160 & v <= 200:\r\n\t\tbs = 3 - aBa\r\n\telse:\r\n\t\tbs = 3.7 - aBa\r\n\t#min is the minimum platform width\r\n\tplatformWidth = 2*bs + 2*0.8\r\n\t#check for obstructions (813.0201A04 p. 5-8)\r\n\tplatformWidth = checkDistances(elevatorLength, elevatorLength, bs, platformWidth)\r\n\tplatformWidth = checkDistances(escalatorLength, numberOfStairs * stairWidth + numberOfEscalators * escalatorWidth, bs, platformWidth)\r\n\t# min width (813.0201A04 2(2) )\r\n\tif platformWidth < 3.3:\r\n\t\tplatformWidth = 3.3\r\nelse:\r\n\tplatformWidth = IN[11]\r\n\t\r\ndistTrackPlatform = aBa\r\nif v <= 160:\r\n\tdangerZone = 2.5 #[m]\t# Gefahrenbereich Lichtraumprofil\r\nelse:\r\n\tdangerZone = 3.0 \r\n\t\r\ndistTracks = IN[9]\t #[m]\t# Werte nach EBO §10 und Ril 800.0130\r\nouterTrack = dangerZone + distTrackPlatform\r\ninnerTracks = 2 * distTrackPlatform + distTracks\r\nsafetyStripPlatform = bs\r\n#########################################################################\r\n#########################################################################\r\n#detailed calculation\r\n#########################################################################\r\n#########################################################################\r\n# Caclulation of b_mittel (813.0201A05)\r\n#Q_a = 1\r\n#Q_e = 1\r\n#n_b = 2\r\n\r\n#813.0201 A05 p. 2/3\r\n#if trafficLevel == 1:\r\n#\tif localTraffic == True:\r\n#\t\td_v = 0.5\r\n#\t\td_as = 1.5\r\n#\telse:\r\n#\t\td_v = 0.3\r\n#\t\td_as = 1\r\n#elif trafficLevel == 2:\r\n#\tif localTraffic == True:\r\n#\t\td_v = 1\r\n#\t\td_as = 2.5\r\n#\telse:\r\n#\t\td_v = 0.8\r\n#\t\td_as = 2\r\n#elif trafficLevel == 3:\r\n#\td_v = 1\r\n#\td_as = 2.5\r\n\t\t\r\n# calc A_as\r\n#A_w = Q_e / d_as\r\n#l_access = 1\r\n#w_access = 1\r\n#A_access = l_access * w_access\r\n#l_storage = 2\r\n#w_storage = 2.5 #813.0202 Abs 8 (7)\r\n#A_storage = l_storage * w_storage\r\n#nr_escalators = IN[5] * 2\r\n#w_stairs = nr_escalators * 1.8 # with of escalators\r\n#l_stairs = 1.5 #813.0202, Abs. 5/5 6/5\r\n#A_stairs = l_stairs * w_stairs\r\n#A_service = 10\r\n\r\n#A_as = A_w + A_access + A_storage + A_stairs + A_service\r\n\r\n#b_mean = (Q_a/(L_b*d_v)) + (Q_e/(L_b*d_as)) + (A_as/L_b) + n_b * bs\r\n#########################################################################\r\n#########################################################################\r\n# Assign your output to the OUT variable.\r\nOUT = platformWidth, platformHeight, trafficLevel, regional, outerTrack, innerTracks, distTracks, distTrackPlatform, dangerZone, safetyStripPlatform",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "af774d71e51647caae282fc088bf06bb",
      "Inputs": [
        {
          "Id": "cdebd4fa74a1498f8979027fabe97bfb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "66caa2cdacdc49d9b496f77217253990",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a667bc430d1487494522b182c28b37a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e51c0990fb9e4fae9d29cf555014c2d6",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3829441d66e946ec82bdd321ac57691f",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "05ad15395ca14aed9df1f414f3f76f23",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f97a8999d554d1da0d6e915ed19c14a",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "29561ad3f79f4a77913bffc9ccf48eb6",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2d59a402367840c98132474ad1e90c1f",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ccbaad2d90ed458399ee27dcf8a7277f",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "08c938a77a284acb8817538a14186f0a",
          "Name": "IN[10]",
          "Description": "Input #10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16b0f9a0c24047f78d3c9d42d62e6c18",
          "Name": "IN[11]",
          "Description": "Input #11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "314e14a12fdc49f29f76991b258ef613",
          "Name": "IN[12]",
          "Description": "Input #12",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2410259915be43ac9623e7086ae5b07a",
          "Name": "IN[13]",
          "Description": "Input #13",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15ddd1f9c5c54f29b02ed6fddad84f98",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 3.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "InputValue": 1.0,
      "Id": "3949bf9b3e7a4dcfb52c38c63d41f89c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cbf5cc635b0d4381842bd1ab4e83de78",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "2122344a6c6c4f5e900634e71d62c5eb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e981f7c2bb64f1d85493f8c0ecd0bdc",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 10.0,
      "MinimumValue": 6.0,
      "StepValue": 0.5,
      "InputValue": 6.0,
      "Id": "859c366329bb4d16875a776dac8f000a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1b4b69dec30e439b839b0b8aba428a52",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 230.0,
      "MinimumValue": 10.0,
      "StepValue": 10.0,
      "InputValue": 100.0,
      "Id": "04530e04386248d3a3affe3762d7660b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c7e5e94608a64df095aab7a895b1f1ef",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 15.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "InputValue": 3.0,
      "Id": "b420fc1637f44fc5a6fd8e9929a525df",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8fe2ca711e1f4a4a8a09cfe249ee815e",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 3.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "InputValue": 2.0,
      "Id": "d5fd982584d446088314965fc077506a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "43684ba876684d278f1edd08f40df9b4",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 6,
      "SelectedString": "ATM:ATM",
      "NodeType": "ExtensionNode",
      "Id": "764f7e4dd112489fab080cb3a02a11f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6ee348c6aabb4256867cfecded10c5cd",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 33,
      "SelectedString": "Ticketmachine:Ticketmachine",
      "NodeType": "ExtensionNode",
      "Id": "a7e8c75ff74c43c1b3ffb9bbdb322529",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d315704e7cec4220bdbec08f27818ba4",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": 5.0,
      "StepValue": 0.5,
      "InputValue": 20.0,
      "Id": "619194ee147a46bf869e3e6373ed406f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "552638be7b374455ae8ab53b85ea72f1",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 15.0,
      "MinimumValue": 3.0,
      "StepValue": 1.0,
      "InputValue": 7.0,
      "Id": "5f4f339b8e3e4864bf9f6a99777f8b4c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "948d36e87d6749a0b83a45c33ff4ce78",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "e15d5903d5f94bfabbbc763e0f037f08",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f730852870624c368487e690bdab275f",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 30,
      "SelectedString": "Storebooth:Storebooth",
      "NodeType": "ExtensionNode",
      "Id": "073e994e28f14c03b35614344fb596c3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cac4690f59024bf2b086d3a832f5c08e",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#Import Revit Nodes\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Import RevitAPI\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Architecture import *\r\n\r\n# Import DocumentManager and TransactionManager\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n\r\n# Other type etc. variables\r\nfloorType = UnwrapElement(IN[0])\r\nwallType = UnwrapElement(IN[1])\r\ncolumnType = UnwrapElement(IN[2])\r\nstairType = UnwrapElement(IN[3])\r\nescalatorType = UnwrapElement(IN[4])\r\ntrainType = UnwrapElement(IN[5])\r\ntrainWallType = UnwrapElement(IN[6])\r\natmType = UnwrapElement(IN[7])\r\nticketType = UnwrapElement(IN[8])\r\nstoreType = UnwrapElement(IN[9])\r\nvalidatorType = UnwrapElement(IN[10])\r\n\r\ntypeList = [floorType, wallType, columnType, stairType, escalatorType, trainType, trainWallType, atmType, ticketType, storeType, validatorType]\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n#Start Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\t\r\n# Activate the types before create family instance\r\nfor type in range(2,len(typeList)):\r\n\t\tif typeList[type].IsActive == False:\r\n\t\t\ttypeList[type].Activate()\r\n\t\t\tdoc.Regenerate\r\n# End Transaction\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = typeList\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "0bc8b8aefcb94b0f851e4c51d941ae82",
      "Inputs": [
        {
          "Id": "7ed1373472f64d34ae9b91b844d21271",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a2ffa24a8d19403b8ae511ff9c4c4d52",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a9f106b5f53a4c2db153f78670631d84",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6869c76d46d041009be42161378a9a22",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97ad01270b8c4751a8b1a66ff9a45438",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7faf4c334a15479ca52cd21d13b9ac50",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b75a513a18a2443e9e5b482d433dd3b0",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "46a4a4a71956456494750a48b6eca36a",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f57123c7607148838f19305406aa29e4",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3e864c454abb49d388c3f9ecc4ea181d",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65ab6c93d9c34ff19f1dcd2641da7a8d",
          "Name": "IN[10]",
          "Description": "Input #10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8154bd0aa63a4bc6a06a9ba245626224",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 23,
      "SelectedString": "new_stairs:31/16 Ril 813.0202 5(3)",
      "NodeType": "ExtensionNode",
      "Id": "c227e785b58943edafa76525500a0bd7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4e24ef82048b44028aff57dc2f0a666e",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 32,
      "SelectedString": "Ticket_validator:Standard",
      "NodeType": "ExtensionNode",
      "Id": "b72ecce27dbf4e2cb0eee76b03dc336d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "966e76a808dc457aa437427052de2ea0",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "60a71154374945eeb0db2843f0f4b194",
      "Inputs": [
        {
          "Id": "c9359ab310644dc086eac78ab28cc4b2",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c771ffd098194cc984325f2c5a9e9676",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e9e416f150ca477f8f408d9c658c002e",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 1,
      "MaximumValue": 3,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "31a13685283c42b9add86dd57ed46c95",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "55de3ad9e11a4349a9922b8af3af16a5",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a=0.96;\nb=0.76;\nc=0.55;\nd=0.38;\nlist=[a,b,c,d];",
      "Id": "3c5c3fe74d5b41d4b4b801f168fe29d2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "986306dae7c844ce834b6ab886f56e6f",
          "Name": "",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "563f776082b746cd84117094ec4fe956",
          "Name": "",
          "Description": "b",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "591eb7116e7242b98cc6a07a827060fd",
          "Name": "",
          "Description": "c",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "22008ce5aeb44a518fc67086f5088459",
          "Name": "",
          "Description": "d",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7dacc02e4598484c911ef148311ea9be",
          "Name": "",
          "Description": "list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 100.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "InputValue": 100.0,
      "Id": "5d9828480221475baf6e48bad2b42525",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3a799cc98d0f410db77ca2597b636813",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "d087c5b10db143da9f71e77163911823",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1fa72074c51247d4910e1806030fab8b",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": 5.0,
      "StepValue": 5.0,
      "InputValue": 10.0,
      "Id": "c126dde365db4cc7a46bb27a6b30f6ff",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e19572f9037d46bd8f30b7520cd85231",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 1.1,
      "MinimumValue": 0.8,
      "StepValue": 0.1,
      "InputValue": 1.1,
      "Id": "3e49a6e7984843bcaf9cd979a140f65d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ae5bc0821e9441b5891dd32272291838",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 22,
      "SelectedString": "IC_Walls:IC_Walls",
      "NodeType": "ExtensionNode",
      "Id": "8cde6c34c459454e9004058a26f28e9c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a59e80708ad645afaad9f814f734d994",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "7b90c8e74b004d8ca656aef26d3f8cfd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6033a5f85f334c4fb776e0c16b4ae024",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 8.0,
      "MinimumValue": 3.5,
      "StepValue": 0.1,
      "InputValue": 4.2,
      "Id": "bd1b00af5a374ae78a3db17b3cc8d4f5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4b8e3c57c9a9452fb16f3bdd0fa3f8a3",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "5362827e790549c5b778bda177cd6bfd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "207a1fb498fa40f89444e9744bf923a8",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 30.0,
      "MinimumValue": 0.0,
      "StepValue": 0.05,
      "InputValue": 10.0,
      "Id": "b2c1f69647394f44a916f5bcb14b7bff",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1a27d7e77ab7435ba8fe804d489488d3",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 20.0,
      "MinimumValue": 2.0,
      "StepValue": 0.5,
      "InputValue": 6.0,
      "Id": "1df9694bdc1e411ca2ac7e2131f07671",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a35eb04cfbf644728344549c360d5a7c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 6.0,
      "MinimumValue": 1.2,
      "StepValue": 0.6,
      "InputValue": 2.4,
      "Id": "4ba388afdb6f4a199c2adaf4d7e4f99c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3a09cf818c4b460cbd5fda45829eece0",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 2.0,
      "MinimumValue": 1.0,
      "StepValue": 0.1,
      "InputValue": 1.8,
      "Id": "072f17785abf4cc39dc5136a68b95710",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "629c161841ad43edb51f6634a3b0d556",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "escalatorExitClearance=2.5;\nstairExitClearance=1.5;\nelevatorExitClearance=1.5;\nlist=[escalatorExitClearance,\nstairExitClearance,\nelevatorExitClearance];",
      "Id": "876097dbc23944c9b6110b8939af53c9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "73c9581abf764ce49959b8639c263362",
          "Name": "",
          "Description": "escalatorExitClearance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dba755fe7b004b5a9630a287adfac4ff",
          "Name": "",
          "Description": "stairExitClearance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65abcee6bf794d6cad1d54aaf66ec83a",
          "Name": "",
          "Description": "elevatorExitClearance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "450779b2d2c44c0097e98feb350c5b2d",
          "Name": "",
          "Description": "list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 1,
      "MaximumValue": 1,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "2dc815a069a34ecd827e425ba9d48455",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6372d02a3d16452d94e9ed01bf3c69bc",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 2,
      "MaximumValue": 4,
      "MinimumValue": 1,
      "StepValue": 1,
      "Id": "5549baa7f780455384ca099becc0b93e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "34133f80ce7544b59c160eef703f7c5e",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 2,
      "MaximumValue": 4,
      "MinimumValue": 1,
      "StepValue": 1,
      "Id": "362a811f743d4f03a38ab35cc82d6377",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3aa8cb485fbf42db9c4ad0f9d3aa6b88",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 4,
      "MaximumValue": 8,
      "MinimumValue": 2,
      "StepValue": 1,
      "Id": "a23efd7c6d0f4301aaa00e4eba189874",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2668e6fe979844a48fe168791a48e88c",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 2,
      "MaximumValue": 4,
      "MinimumValue": 2,
      "StepValue": 1,
      "Id": "4b40e27ff785438dbe70b1ae9941cfd5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "035ebd166e89469ca54370bc7958b9d7",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 2,
      "MaximumValue": 3,
      "MinimumValue": 1,
      "StepValue": 1,
      "Id": "93dd3d42c8c4464fb90f83360efc52de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dc8a6772f9b84ac3bc5c38263b478ee7",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 20.0,
      "MinimumValue": 1.8,
      "StepValue": 0.1,
      "InputValue": 1.8,
      "Id": "5a57219466db46d29f2521ba7ebbc3fa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1729df3e99654d36badfaa727c3ea9e8",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToEnd@var[]..[],var[]..[]",
      "Id": "767cbce34ce6427e9a7f619a0bb4f935",
      "Inputs": [
        {
          "Id": "7b5eb51eefed43b5ac17505de7d87f67",
          "Name": "item",
          "Description": "Item to be added.Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f90c08daa0d34091b05af87c23713ace",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4136017b87a541bca42c1019e704ba96",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the end of a list.\n\nList.AddItemToEnd (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "4afb43897b264e4bbb7f76c5701457a1",
      "Inputs": [
        {
          "Id": "c0c35cfd70394729a390e2d252ce7fc2",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1fada0f3804b4eceb417996a9e2746ca",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47bc4fd5d01e4fff865cd5802d85cd06",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "600b50bf72a14777a2e274b8d21a9cab",
          "Name": "item3",
          "Description": "Item Index #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0f0889a88024757bcc5c6a7e391a19a",
          "Name": "item4",
          "Description": "Item Index #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "063101a45c3e4ca398535cbc91481c4d",
          "Name": "item5",
          "Description": "Item Index #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e1e646faacbc458eafc72829db4b82c3",
          "Name": "item6",
          "Description": "Item Index #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee336fb1de8b4fefa7ceb7b92ecba990",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "1661a82a791d4ef8aefdd38dc65c9189",
      "Inputs": [
        {
          "Id": "3b63db33461249a0880fed221a26fee1",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a5123abf80ec41bf864f24584a36f9a5",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "39db69ce132448b999ef58b7008685f7",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4bfb5b09a34c4e168619ec2fbf9feeec",
          "Name": "item3",
          "Description": "Item Index #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b09b25e0cb85442d91900ac683549540",
          "Name": "item4",
          "Description": "Item Index #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "93ae402c19a0452e81c79dca18292805",
          "Name": "item5",
          "Description": "Item Index #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "47b3dacf2ac64748bbdb421d110d41af",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "057219e7ac7943268312aa8bbe8cf431",
      "Inputs": [
        {
          "Id": "baee9d0decc94186a5bfdb48b9abbbd5",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "28e30d74b1cb41c99c75fb109b48307b",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "626b0a42593f456caa490eadcced9044",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dc6ea25e539d4257b1e1499290f7cf0f",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "e345f84b7c264af9b6dab424ebebf9c2",
      "Inputs": [
        {
          "Id": "1b327040b6964e26a9f5c2e4641d7892",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3aa5d11ff4444e428420af3b2e3cdd56",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6aefd4f5903246899db093c7d1491994",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport os\r\nimport time\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#Import Revit Nodes\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Architecture import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"System\")\r\nfrom System.Collections.Generic import List\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nviewList = IN[0][0]\r\nviewColorList = IN[0][1]\r\npath = IN[1]\r\nfolderName = IN[3]\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n# Place your code below this line\r\n\r\n# custom:\r\nonlyExportEG = IN[11]\r\n\r\nfloorTypes = FilteredElementCollector(doc).OfClass(ViewFamilyType).ToElements();\r\nfloorId = UnwrapElement( floorTypes[0]).Id\r\n\r\nif IN[2] and (IN[5] or IN[6] or IN[7] or IN[9] or IN[10]):\t\r\n\tif IN[4]:\r\n\t\tfolders = os.listdir(path)\r\n\t\tmaxNumber = -1\r\n\t\tfor folder in folders:\r\n\t\t\ttry:\r\n\t\t\t\tmaxNumber = max(int(folder.split(folderName)[1]),maxNumber)\r\n\t\t\texcept:\r\n\t\t\t\tprint(\"Folder Error\")\r\n\t\tmaxNumber += 1\r\n\t\tfolderName += str(maxNumber)\r\n\tpath= os.path.join(path, folderName)\r\n\tif not os.path.exists(path):\r\n\t\tos.makedirs(path)\r\n##########################################################################\r\n##########################################################################\r\n#View Export\r\n##########################################################################\r\n##########################################################################\r\nexportPath = path\r\nfileName = \"Test\"\r\nfilePath = os.path.join(exportPath, fileName)\r\n\r\nviewIdList = [view.Id for view in UnwrapElement(viewList)]\r\n# custom:\r\nif onlyExportEG:\r\n\tviewIdList = [view.Id for view in UnwrapElement(viewList) if view.Name.startswith(\"EG\")]\r\nif IN[5]:\r\n\toptions = ImageExportOptions()\r\n\toptions.FilePath = filePath\r\n\toptions.ExportRange = ExportRange.SetOfViews\r\n\toptions.SetViewsAndSheets(viewIdList)\r\n\toptions.HLRandWFViewsFileType = ImageFileType.PNG\r\n\toptions.PixelSize = 2500\r\n\toptions.ImageResolution = ImageResolution.DPI_600\r\n\toptions.FitDirection = FitDirectionType.Horizontal\r\n\toptions.ZoomType = ZoomFitType.FitToPage\r\n\tdoc.ExportImage(options)\r\n#ColorViews\r\nviewColorIdList = [view.Id for view in UnwrapElement(viewColorList)]\r\n# custom:\r\nif onlyExportEG:\r\n\tviewColorIdList = [view.Id for view in UnwrapElement(viewColorList) if view.Name.startswith(\"EG\")]\r\nif IN[6]:\r\n\toptions = ImageExportOptions()\r\n\toptions.FilePath = filePath\r\n\toptions.ExportRange = ExportRange.SetOfViews\r\n\toptions.SetViewsAndSheets(viewColorIdList)\r\n\toptions.HLRandWFViewsFileType = ImageFileType.PNG\r\n\toptions.PixelSize = 5000\r\n\toptions.ImageResolution = ImageResolution.DPI_600\r\n\toptions.FitDirection = FitDirectionType.Horizontal\r\n\toptions.ZoomType = ZoomFitType.FitToPage\r\n\tdoc.ExportImage(options)\r\n##########################################################################\r\n##########################################################################\r\n# IFC Export\r\n##########################################################################\r\n##########################################################################\r\nif IN[7]:\r\n\toptions=IFCExportOptions()\r\n\toptions.FileVersion = IFCVersion.IFC2x3CV2\r\n\toptions.AddOption(\"ExportUserDefinedPsets\",\"true\")\r\n\toptions.AddOption(\"ExportInternalRevitPropertySets\",\"false\")\r\n\toptions.AddOption(\"ExportBaseQuantitiesPsets\",\"false\")\r\n\toptions.AddOption(\"ExportExportIFCCommonPropertySets\",\"false\")\r\n\toptions.AddOption(\"ExportUserDefinedPsetsFileName\",str(IN[8]))\r\n\t\t\r\n\tc=doc.Export(exportPath, fileName, options)\r\n##########################################################################\r\n##########################################################################\r\n#Dwg Export\r\n##########################################################################\r\n##########################################################################\r\n#viewIdList = List[ElementId]([view.Id for view in UnwrapElement(viewList)])\r\nif IN[9]:\r\n\toptions = DWGExportOptions()\r\n\tdoc.Export(exportPath, fileName, List[ElementId](viewIdList), options)\r\n##########################################################################\r\n##########################################################################\r\n#Log Export\r\n##########################################################################\r\n##########################################################################\r\nif IN[10]:\r\n\tstdout_original = sys.stdout\r\n\tstdout_file = open(exportPath + \"/Log.txt\", 'a')\r\n\tsys.stdout = stdout_file\r\n\t\r\n\tprint(\"This is a filler... da da da\")\r\n\r\n\tsys.stdout = stdout_original\r\n\tstdout_file.close()\r\n\t\r\nTransactionManager.Instance.TransactionTaskDone()\r\n# Assign your output to the OUT variable.\r\nOUT = viewList, viewColorList, path, filePath+\" - Floor Plan - EG  Coloured.png\"",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "1c53288618d5449c8403f3964fb0e68f",
      "Inputs": [
        {
          "Id": "84aab32bd759494ab270eb3982f99aa5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "02388a5990284d1d89322bb4fdd6e907",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6645c1b7c3dc47029c151d0fb4dfc231",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "02f222dcd5c84722a69e1910c9dc07d2",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89feb6f05d6f4b038ffabeec46f79f85",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "012141781dd24240b14d01e6ed97b315",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d222358b42194394b9c17ff1fdd59d63",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1531865d835b48eeb611f3547f3b17b5",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2890f8fe628d4ab5a8bf1d3c9ecbc7c8",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16605ca83d1c48bca00648337496d565",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "64fd7998e3fb4fae822a421fc022e59b",
          "Name": "IN[10]",
          "Description": "Input #10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "85c0105f09e54ba8bab252ff45f399b1",
          "Name": "IN[11]",
          "Description": "Input #11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1bcd319935ab4cc0ace18fce5a65edd3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport time\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#Import Revit Nodes\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitAPI\")\r\n\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Architecture import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"System\")\r\nfrom System.Collections.Generic import List\r\n\r\n# functions\r\ndef ConvertColor(e):\r\n\treturn Color(e.Red, e.Green, e.Blue)\r\n\r\ndef OverrideColorPattern(element, color, pattern, view):\r\n\tgraphicSettings = OverrideGraphicSettings()\r\n\tgraphicSettings.SetSurfaceForegroundPatternColor(color)\r\n\tgraphicSettings.SetCutForegroundPatternColor(color)\r\n\tgraphicSettings.SetSurfaceForegroundPatternId(UnwrapElement(pattern).Id)\r\n\tgraphicSettings.SetCutForegroundPatternId(UnwrapElement(pattern).Id)\r\n\tUnwrapElement(view).SetElementOverrides(element.Id, graphicSettings)\r\n\t\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nonlyExport = IN[7]\r\n\r\nif not onlyExport:\r\n    listList = IN[0][3]\r\n    levelList = UnwrapElement(listList[0])\r\n    decorationList = UnwrapElement(listList[8])\r\n    familyTypes = IN[0][6]\r\nelse:\r\n    docData = IN[8]\r\n    levelList = UnwrapElement(docData[0])\r\n    familyTypes = docData[1]\r\n    decorationList = []\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n# Place your code below this line\r\nfloorTypes = FilteredElementCollector(doc).OfClass(ViewFamilyType).ToElements();\r\nfloorId = UnwrapElement( floorTypes[0]).Id\r\n\r\nviewList = []\r\n\r\nfor level in levelList:\r\n    view = ViewPlan.Create(doc, floorId, level.Id)\r\n    \r\n    view.HideElements(List[ElementId](FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Elev).ToElementIds()))\r\n    view.HideElements(List[ElementId](FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Viewers).ToElementIds()))\r\n    view.CropBoxActive = True\r\n    viewRange = view.GetViewRange()\r\n    viewRange.SetOffset(PlanViewPlane.ViewDepthPlane, -5)\r\n    view.SetViewRange(viewRange)\r\n    viewList.append(view)\r\n    \r\n    #########################################################\r\n    #########################################################\r\n    # Coloured Views\r\nobstacleColor = ConvertColor(IN[2])\r\noriginColor = ConvertColor(IN[3])\r\ndestinationColor = ConvertColor(IN[4])\r\nverticalTransportationColor = ConvertColor(IN[5])\r\nwalkableFloorColor = ConvertColor(IN[6])\r\n\r\n#get all elements\r\nwalkableFloors = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors)\r\nwalls = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls)\r\ncolumns = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns)\r\ngeneralModels = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_GenericModel).OfClass(FamilyInstance).ToElements()\r\nverticalTransportationElements = []\r\norigins = []\r\ntrainWalls = []\r\nfor element in generalModels:\r\n    if element.Name == familyTypes[3].Name or element.Name == familyTypes[4].Name:\r\n        verticalTransportationElements.append(element)\r\n    elif element.Name == familyTypes[5].Name:\r\n        origins.append(element)\r\n    elif element.Name == familyTypes[6].Name:\r\n        trainWalls.append(element)\r\n    \r\n# solid fill pattern\r\nfillPatterns = FilteredElementCollector(doc).OfClass(FillPatternElement)\r\nfor pattern in fillPatterns:\r\n    if UnwrapElement(pattern).GetFillPattern().IsSolidFill:\r\n        solidPattern = pattern\r\n        break\r\nviewListColour = []\r\nif IN[1]:\r\n    viewTypes = FilteredElementCollector(doc).OfClass(ViewFamilyType).ToElements();\r\n    viewTypeId = UnwrapElement( viewTypes[0]).Id\r\n\r\n    \r\n    \r\n    for level in levelList:\r\n        view = ViewPlan.Create(doc, viewTypeId, level.Id)\r\n        view.Name = view.Name + \" Coloured\"\r\n        view.Name = view.Name.Replace(\"(1)\",\" \")\r\n        view.HideElements(List[ElementId](FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Elev).ToElementIds()))\r\n        view.HideElements(List[ElementId](FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Viewers).ToElementIds()))\r\n        view.CropBoxActive = True\r\n        viewRange = view.GetViewRange()\r\n        viewRange.SetOffset(PlanViewPlane.ViewDepthPlane, -5)\r\n        view.SetViewRange(viewRange)\r\n        view.DetailLevel = ViewDetailLevel.Medium\r\n        viewListColour.append(view)\r\n\r\n    #Apply Color\r\n        for floor in walkableFloors:\r\n            OverrideColorPattern(floor, walkableFloorColor, solidPattern, view)\r\n            if floor.LookupParameter(\"accu_rate_type\") is not None:\r\n                if floor.LookupParameter(\"accu_rate_type\").AsString() == \"Destination\":\r\n                    OverrideColorPattern(floor, destinationColor, solidPattern, view)\r\n                elif floor.LookupParameter(\"accu_rate_type\").AsString() == \"Origin\":\r\n                    OverrideColorPattern(floor, originColor, solidPattern, view)\r\n                \r\n        for wall in walls:\r\n            OverrideColorPattern(wall, obstacleColor, solidPattern, view)\r\n        for column in columns:\r\n            OverrideColorPattern(column, obstacleColor, solidPattern, view)\r\n        for deco in decorationList:\r\n            OverrideColorPattern(deco, obstacleColor, solidPattern, view)\r\n        for vert in verticalTransportationElements:\r\n            OverrideColorPattern(vert, verticalTransportationColor, solidPattern, view)\r\n        for origin in origins:\r\n            OverrideColorPattern(origin, originColor, solidPattern, view)\r\n        for wall in trainWalls:\r\n            OverrideColorPattern(wall, obstacleColor, solidPattern, view)\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n# Assign your output to the OUT variable.\r\nOUT = viewList, viewListColour",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "87e6d59395374d1186a9b34aa57f3548",
      "Inputs": [
        {
          "Id": "62f0dbe3173747a8a37ef3d71bd3f452",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8bc2d2fa7404425da4aecf65c1f7bc5a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "100c1268487848c9bc8cf71543704b58",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f6039fcf6f0543a9a8fd3ed259805b6d",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c50ae48f0be74a2ea29725a615a5fc4d",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8647f07ddeb340daab691100500773c4",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d8335bf1bbc54c8db4599b9866147da4",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b070ffc62bde4e7b9aff961ec5299155",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "101375a3eb2f4aed990b04f2965f1a08",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "23b28942039743f79e2f17a3e0111fbf",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "3b2c10c8a1524b479b5cd847680f0240",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0f325c127efe4f37bd98ea6cfdeddaf6",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "63402c7670f742acb41b19fc3c0ad594",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7ea9135aaa6e4b3098aaa62b6276da9e",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "d09eb7be7c5e4b79bddbdd7f3912d1bb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5bb656a2506446ca885a02e89555784e",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "de5b48ea60e349d49fbefa11c9f00ed2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "81fd3db74b7c4351906587226bb5e5ef",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "6e93aa57406243c2b6f53041a8942466",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0407e9fdb89945a28e0cbe301feb55e7",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Directory, CoreNodeModels",
      "HintPath": "C:\\Users\\ga78jem\\Documents\\Revit\\U9-Dynamo\\U9 Temp",
      "InputValue": "C:\\Users\\ga78jem\\Documents\\Revit\\U9-Dynamo\\U9 Temp",
      "NodeType": "ExtensionNode",
      "Id": "03bf2edffdbd4ad18d85298e3ea57e68",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bf70c9d3b2c946cfb6e764cb2cf7afe0",
          "Name": "",
          "Description": "Directory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a directory on the system to get its path"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "ff17db7c0a864e948289d7fedbef2c52",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e5b98e96669f4b6a8643277fa88b4950",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Test_",
      "Id": "30b6ec3bedbc4969a5d94292630a946b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "923eeb915cce4a1b8cf0c54da3a70626",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "574f44dd54594825959be19fffcac4de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7ba224b080834777a4d12601f7de2e58",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 0,
        "G": 0,
        "B": 255,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "96286062063d408db68bfe0c1d4dcd34",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "28eb855acc8f4743b9883cf342f0dcd1",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 0,
        "G": 252,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "53a3fa21b73d40d0bb3a902a1bd49c33",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f96cf5604f6741448773cccb5f0d06ea",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 255,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "bcd98c5768c34d419f03ff1b876ec7f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "585bad45cb234d09a59399e022769c39",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 0,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "8babd6351e9a4db4a769cc4fc0d806d4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9a3b21389e70441ea4c4f8c71d199426",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 255,
        "B": 255,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "422f2fbbd2a2461e94ae664c918e2b23",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4788e5f1f80a457a969b204eca49c10a",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Views, DSRevitNodesUI",
      "SelectedIndex": 20,
      "SelectedString": "EG (Architekt)",
      "NodeType": "ExtensionNode",
      "Id": "263536cdede54434af2a2036eca4f9c8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "87f5679f69a44fa49963841730803c0d",
          "Name": "Views",
          "Description": "The selected Views",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All views available in the current document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\ga78jem\\Documents\\Revit\\U9-Dynamo\\Shared Parameters and IFC Mapping\\ExportIFCMappings.txt",
      "InputValue": "Shared Parameters and IFC Mapping\\ExportIFCMappings.txt",
      "NodeType": "ExtensionNode",
      "Id": "190741c55ff54935a522ddcf25594936",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "670683c8bd6141ac946defbe0c0ef614",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Transaction.Transaction.Start@var",
      "Id": "785587e89e0d4254851d66b8d1b81fc9",
      "Inputs": [
        {
          "Id": "ac6a271a0aaa4c3991240db5bbf343c1",
          "Name": "input",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "926055daa223474689f06d7dce81a35a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Start a transaction if neccesssary, returning whatever was passed in.\n\nTransaction.Start (input: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Transaction.Transaction.Start@var",
      "Id": "42fa0620dad04892beca9eb2a257c5c3",
      "Inputs": [
        {
          "Id": "57654b6cc4e64ec38c13eb37369c04ee",
          "Name": "input",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "99f5c26add504ce3b71467016b17deb7",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Start a transaction if neccesssary, returning whatever was passed in.\n\nTransaction.Start (input: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Transaction.Transaction.End@var",
      "Id": "7702ac28ad8c4ec2abf515aa060304b1",
      "Inputs": [
        {
          "Id": "026105fc13a14e7bb9f1e12c2e9d9cf9",
          "Name": "input",
          "Description": "An object.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bfbc3fbfe26646d3a9578296115349be",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Ends the current Dynamo transaction, returning whatever was passed in.\n\nTransaction.End (input: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Transaction.Transaction.End@var",
      "Id": "add6db02c20d4497b94e71129528fc96",
      "Inputs": [
        {
          "Id": "7e6517a4541c473f9d5460790eba3905",
          "Name": "input",
          "Description": "An object.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e85435ce2515489fb65412d0c0573773",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Ends the current Dynamo transaction, returning whatever was passed in.\n\nTransaction.End (input: var): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "047741e73c17484a91a2f3248d39b8b5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6545340be0940e4a3ad93cbd06f6788",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "8d5617f0720d498e98eed01bf97aaa4b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4c5abc8b627940428c9824c918155ae9",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementTypes, DSRevitNodesUI",
      "SelectedIndex": 178,
      "SelectedString": "Level",
      "NodeType": "ExtensionNode",
      "Id": "5a8c93ed681842fcb64989005e839819",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e880596f74c640bca76454d9f8fbac8d",
          "Name": "Types",
          "Description": "The selected Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All element subtypes."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "c25cbbdf3b464ccbbc774d9d6b63c519",
      "Inputs": [
        {
          "Id": "fc6f8cf9ebb8499c82e676e20d857214",
          "Name": "element type",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21730a44c5ed47d88df551a7b793a6be",
          "Name": "elements",
          "Description": "All elements in the active document of a given type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All elements in the active document of a given type."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = [IN[0], IN[1]]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "4d7c14264b2a4ec787164bc1dd0d8a0d",
      "Inputs": [
        {
          "Id": "c5534b50d3e84e0ba316edb5d3353888",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a218fe3fdea948e4b6df7d34f5e73e4d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "514ab72abfc243ccb530b04ee636d206",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport System\r\nfrom System.IO import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('System.Drawing')\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nfilePath = IN[0][-1]\r\n\r\n#filePath = 'C:\\\\Users\\\\ga78jem\\\\Documents\\\\PhD\\\\Publications\\\\PED2023\\\\Figures\\\\T4_E2_S0_O1_A10_C0.png'\r\nfilePath = 'C:\\\\Users\\\\ga78jem\\\\Documents\\\\PhD\\\\Publications\\\\PED2023\\\\Figures\\\\bim_impl\\\\T4_E2_S0_O1_A10_C2_edited.png'\r\n\r\nresult = Image.FromFile(filePath)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "f1b1829957a848b7b925ce69bc81949f",
      "Inputs": [
        {
          "Id": "8489e22e20ef477da5fcc885d065a92b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8c281b5d1c184a839207f6a4ec24acd4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport System\r\nimport sys\r\nimport os\r\nfrom System.IO import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nimport tempfile\r\n\r\n# environment_folder = IN[0]\r\nenvironment_folder = \"C:\\\\Users\\\\ga78jem\\\\AppData\\\\Local\\\\miniconda3\\\\envs\\\\python38_torch\"\r\n\r\nloaded_image = None\r\n\r\nOUT = [environment_folder, loaded_image]\r\n#package_path = environment_folder+\"\\\\lib\\\\site-packages\"\r\n\r\n#sys.path.append(package_path)\r\n#import cv2\r\n#import numpy as np\r\n\r\n#OUT = sys.path\r\n\r\n\"\"\"\r\nif UnwrapElement(IN[0]) and IN[1] : \r\n    package_path = fr\"{IN[1]}\\lib\\site-packages\"\r\n    sys.path.append(package_path)\r\n    import cv2\r\n    import numpy as np\r\n\r\n    image_path = UnwrapElement(IN[0])\r\n    image = cv2.imread(image_path)\r\n    image_height , image_width , _ = image.shape\r\n\r\n    padded_image_width = int(IN[2])\r\n    padded_image_height = int(IN[3])\r\n\r\n    site_x = 25\r\n    site_y = 20\r\n    new_image_dimensions = [site_x * 10 , site_y * 10]\r\n    \r\n    padded_image = np.zeros((padded_image_height, padded_image_width , 3), dtype=np.uint8)\r\n    padded_image_centers = [\r\n        int(dim / 2) for dim in [padded_image_width , padded_image_height]\r\n    ]\r\n\r\n    # using different interpolation order for upsizing and downsizing\r\n    if site_x * 10 > image_width and site_y * 10 > image_height : \r\n        scaled_image = cv2.resize(image, tuple(new_image_dimensions), interpolation=cv2.INTER_CUBIC)\r\n    else : \r\n        scaled_image = cv2.resize(image, tuple(new_image_dimensions), interpolation=cv2.INTER_AREA)\r\n\r\n    origin_in_padded_image = [\r\n        int(padded_image_centers[i] - new_image_dimensions[i] / 2) for i in range(2)\r\n    ]\r\n\r\n    padded_image[\r\n        origin_in_padded_image[1] : origin_in_padded_image[1] + new_image_dimensions[1] , origin_in_padded_image[0] : origin_in_padded_image[0] + new_image_dimensions[0]\r\n    ] = scaled_image\r\n\r\n    padded_image_path = tempfile.mktemp(suffix=\".png\")\r\n    cv2.imwrite(padded_image_path , padded_image)\r\n\r\n    OUT = padded_image_path\r\n\"\"\"",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9766b00e40fd400b99a630af05263bd3",
      "Inputs": [
        {
          "Id": "c181b52bd53f4e18afb9f01a86c1986a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "af6e8d9f788346a3aba385b68f5d1b4d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "374165522b994b81aa42cba060a0a378",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.WatchImageCore, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "afa7bf92610949a5b82ffe696914cb2d",
      "Inputs": [
        {
          "Id": "4746bb5b88c0465ab42c7ccc08d53184",
          "Name": "image",
          "Description": "image",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5dccf1ab2a134f2c941ab96cf040c754",
          "Name": "image",
          "Description": "image",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Previews an image"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Directory, CoreNodeModels",
      "HintPath": "C:\\Users\\ga78jem\\miniconda\\envs\\venv_torch",
      "InputValue": "C:\\Users\\ga78jem\\miniconda\\envs\\venv_torch",
      "NodeType": "ExtensionNode",
      "Id": "f7f85b44e9b44c3883d81b1e2ff143e8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a3b514c146274a65a67af8412db26557",
          "Name": "",
          "Description": "Directory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a directory on the system to get its path"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\ga78jem\\Documents\\best_model.ckpt",
      "InputValue": "..\\..\\best_model.ckpt",
      "NodeType": "ExtensionNode",
      "Id": "73e499de29b34d5ea4e0a28ddd72bf89",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f1887f97737248ab9b37cef52484c13d",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport os\r\nimport clr\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n#ckpt_path = IN[0]\r\n#virt_env_path = r\"C:\\Users\\ga78jem\\AppData\\Local\\miniconda3\\envs\\CritAreaPred_py39\" #CritAreaPrediction\"# IN[2][0]\r\n#img = IN[2][1]\r\n#num_agents = IN[1]\r\n\r\n#package_path = os.path.join(os.getenv(r'LOCALAPPDATA'), r'python-3.8.3-embed-amd64\\Lib\\site-packages')\r\n#sys.path.append(package_path)\r\nimport torch\r\nimport math\r\nfrom transformers import DetrForObjectDetection, DetrConfig\r\nfrom transformers.models.detr.modeling_detr import BaseModelOutput, DetrModelOutput, DetrObjectDetectionOutput, DETR_INPUTS_DOCSTRING, _CONFIG_FOR_DOC\r\nfrom transformers.utils.doc import add_start_docstrings_to_model_forward, replace_return_docstrings\r\n\r\n\r\n# neural network classes\r\nclass Detr_custom(DetrForObjectDetection):\r\n    def __init__(self, config = None):\r\n        config=DetrConfig()\r\n        super().__init__(config)\r\n        self.overwrite_functions()\r\n        \r\n        self.class_labels_classifier = torch.nn.Linear(self.model.config.d_model, 2) # detection + no_detection\r\n        self.model.config.num_labels = 1\r\n        self.embed_dim = 256\r\n        # 'vanilla', 'vanilla_imgAugm', 'before_encoder', 'after_encoder', 'before_encoder+', 'after_encoder+'\r\n        self.additional_queries = 'after_encoder'\r\n        \r\n        # if not the original DETR implementation...\r\n        if self.additional_queries not in ['vanilla', 'vanilla_imgAugm']:\r\n            self.num_extra_queries = 100\r\n            if not self.additional_queries.endswith('+'):\r\n                self.central_ascent_embeddings, self.sides_ascent_embeddings = None, None\r\n                self.agent_embeddings = torch.nn.Embedding(3, self.embed_dim)\r\n            else:\r\n                self.agent_embeddings = torch.nn.Embedding(3, self.embed_dim) \r\n                self.central_ascent_embeddings = torch.nn.Embedding(7, self.embed_dim) # additional 7 options (E=1/2/3 + S=0/2.4 + None) both for vertical ascent in the center and from the sides\r\n                self.sides_ascent_embeddings = torch.nn.Embedding(7, self.embed_dim)\r\n                self.obstacle_presence_embeddings = torch.nn.Embedding(2, self.embed_dim)\r\n            self.model.backbone.position_embedding = DetrSinePositionEmbedding_custom(self.config.d_model // 2, normalize=True, num_extra_queries=self.num_extra_queries)\r\n        else:\r\n            self.num_extra_queries = None\r\n\r\n        # for tuning...\r\n        k_decoder_queries = 100\r\n        if k_decoder_queries != self.model.query_position_embeddings.num_embeddings:\r\n            self.model.query_position_embeddings = torch.nn.Embedding(k_decoder_queries, self.model.config.d_model)\r\n\r\n            \r\n\r\n    def overwrite_functions(self):\r\n        self.forward = self.forward\r\n        self.model.forward = self.model_forward\r\n        \r\n        for enc_layer in self.model.encoder.layers:\r\n            self_attn = enc_layer._modules['self_attn']\r\n            self_attn.with_pos_embed = self.with_pos_embed_overwritten\r\n        for dec_layer in self.model.decoder.layers:\r\n            self_attn = dec_layer._modules['self_attn']\r\n            self_attn.with_pos_embed = self.with_pos_embed_overwritten\r\n            enc_attn = dec_layer._modules['encoder_attn']\r\n            enc_attn.with_pos_embed = self.with_pos_embed_overwritten\r\n\r\n    def with_pos_embed_overwritten(self, tensor: torch.Tensor, position_embeddings: torch.Tensor):\r\n        if position_embeddings is None:\r\n            return tensor\r\n        elif tensor.size() == position_embeddings.size():\r\n            return tensor + position_embeddings\r\n        elif tensor.shape[1] < position_embeddings.shape[1]:\r\n            return tensor + position_embeddings[:, :tensor.size(1), :]\r\n        else:\r\n            raise NotImplementedError\r\n           \r\n    \r\n    #################################################################################\r\n    # MODEL FORWARD #################################################################\r\n    #################################################################################\r\n    @add_start_docstrings_to_model_forward(DETR_INPUTS_DOCSTRING)\r\n    @replace_return_docstrings(output_type=DetrModelOutput, config_class=_CONFIG_FOR_DOC)\r\n    def model_forward(\r\n        self,\r\n        pixel_values,\r\n        simulation_embeddings=None, # added to original code\r\n        pixel_mask=None,\r\n        decoder_attention_mask=None,\r\n        encoder_outputs=None,\r\n        inputs_embeds=None,\r\n        decoder_inputs_embeds=None,\r\n        output_attentions=None,\r\n        output_hidden_states=None,\r\n        return_dict=None,\r\n    ):\r\n        \r\n        r\"\"\"\r\n        Returns:\r\n\r\n        Examples:\r\n\r\n        ```python\r\n        >>> from transformers import DetrFeatureExtractor, DetrModel\r\n        >>> from PIL import Image\r\n        >>> import requests\r\n\r\n        >>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\r\n        >>> image = Image.open(requests.get(url, stream=True).raw)\r\n\r\n        >>> feature_extractor = DetrFeatureExtractor.from_pretrained(\"facebook/detr-resnet-50\")\r\n        >>> model = DetrModel.from_pretrained(\"facebook/detr-resnet-50\")\r\n\r\n        >>> # prepare image for the model\r\n        >>> inputs = feature_extractor(images=image, return_tensors=\"pt\")\r\n\r\n        >>> # forward pass\r\n        >>> outputs = model(**inputs)\r\n\r\n        >>> # the last hidden states are the final query embeddings of the Transformer decoder\r\n        >>> # these are of shape (batch_size, num_queries, hidden_size)\r\n        >>> last_hidden_states = outputs.last_hidden_state\r\n        >>> list(last_hidden_states.shape)\r\n        [1, 100, 256]\r\n        ```\"\"\"\r\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\r\n        output_hidden_states = (\r\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\r\n        )\r\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\r\n\r\n        batch_size, num_channels, height, width = pixel_values.shape\r\n        device = pixel_values.device\r\n\r\n        if pixel_mask is None:\r\n            pixel_mask = torch.ones(((batch_size, height, width)), device=device)\r\n\r\n        # First, sent pixel_values + pixel_mask through Backbone to obtain the features\r\n        # pixel_values should be of shape (batch_size, num_channels, height, width)\r\n        # pixel_mask should be of shape (batch_size, height, width)\r\n        features, position_embeddings_list = self.model.backbone(pixel_values, pixel_mask)\r\n\r\n        # get final feature map and downsampled mask\r\n        feature_map, mask = features[-1]\r\n\r\n        if mask is None:\r\n            raise ValueError(\"Backbone does not return downsampled pixel mask\")\r\n\r\n        # Second, apply 1x1 convolution to reduce the channel dimension to d_model (256 by default)\r\n        projected_feature_map = self.model.input_projection(feature_map)\r\n\r\n        # Third, flatten the feature map + position embeddings of shape NxCxHxW to NxCxHW, and permute it to NxHWxC\r\n        # In other words, turn their shape into (batch_size, sequence_length, hidden_size)\r\n        flattened_features = projected_feature_map.flatten(2).permute(0, 2, 1)\r\n        \r\n        # encoding extension must be considered here\r\n        if position_embeddings_list[-1].ndim == 3:\r\n            # here, flatten() has already been performed\r\n            position_embeddings = position_embeddings_list[-1].permute(0, 2, 1)\r\n        elif position_embeddings_list[-1].ndim == 4:\r\n            # default setting\r\n            position_embeddings = position_embeddings_list[-1].flatten(2).permute(0, 2, 1)\r\n\r\n        flattened_mask = mask.flatten(1)\r\n\r\n        # append extra queries before the encoder\r\n        if self.additional_queries == 'before_encoder':\r\n            flattened_features = torch.cat((flattened_features, simulation_embeddings), dim=1)\r\n            flattened_mask = torch.cat((flattened_mask, torch.ones(simulation_embeddings.size(0), simulation_embeddings.size(1), dtype=torch.bool, device=flattened_mask.device)), dim=1)\r\n\r\n        # Fourth, sent flattened_features + flattened_mask + position embeddings through encoder\r\n        # flattened_features is a Tensor of shape (batch_size, heigth*width, hidden_size)\r\n        # flattened_mask is a Tensor of shape (batch_size, heigth*width)\r\n        if encoder_outputs is None:\r\n            encoder_outputs = self.model.encoder(\r\n                inputs_embeds=flattened_features,\r\n                attention_mask=flattened_mask,\r\n                position_embeddings=position_embeddings,\r\n                output_attentions=output_attentions,\r\n                output_hidden_states=output_hidden_states,\r\n                return_dict=return_dict,\r\n            )\r\n        # If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True\r\n        elif return_dict and not isinstance(encoder_outputs, BaseModelOutput):\r\n            encoder_outputs = BaseModelOutput(\r\n                last_hidden_state=encoder_outputs[0],\r\n                hidden_states=encoder_outputs[1] if len(encoder_outputs) > 1 else None,\r\n                attentions=encoder_outputs[2] if len(encoder_outputs) > 2 else None,\r\n            )\r\n\r\n        # Fifth, sent query embeddings + position embeddings through the decoder (which is conditioned on the encoder output)\r\n        query_position_embeddings = self.model.query_position_embeddings.weight.unsqueeze(0).repeat(batch_size, 1, 1)\r\n\r\n        # append extra queries after the encoder\r\n        if self.additional_queries == 'after_encoder':\r\n            queries = torch.zeros_like(query_position_embeddings)\r\n            assert (encoder_outputs[0].requires_grad == simulation_embeddings.requires_grad)\r\n            encoder_outputs['last_hidden_state'] = torch.cat((encoder_outputs[0], simulation_embeddings), dim=1)\r\n            flattened_mask = torch.cat((flattened_mask, torch.ones(simulation_embeddings.size(0), simulation_embeddings.size(1), dtype=torch.bool, device=flattened_mask.device)), dim=1)\r\n        else:\r\n            queries = torch.zeros_like(query_position_embeddings)\r\n\r\n        # decoder outputs consists of (dec_features, dec_hidden, dec_attn)\r\n        decoder_outputs = self.model.decoder(\r\n            inputs_embeds=queries,\r\n            attention_mask=None,\r\n            position_embeddings=position_embeddings,\r\n            query_position_embeddings=query_position_embeddings,\r\n            encoder_hidden_states=encoder_outputs[0],\r\n            encoder_attention_mask=flattened_mask,\r\n            output_attentions=output_attentions,\r\n            output_hidden_states=output_hidden_states,\r\n            return_dict=return_dict,\r\n        )\r\n\r\n        if not return_dict:\r\n            return decoder_outputs + encoder_outputs\r\n\r\n        return DetrModelOutput(\r\n            last_hidden_state=decoder_outputs.last_hidden_state,\r\n            decoder_hidden_states=decoder_outputs.hidden_states,\r\n            decoder_attentions=decoder_outputs.attentions,\r\n            cross_attentions=decoder_outputs.cross_attentions,\r\n            encoder_last_hidden_state=encoder_outputs.last_hidden_state,\r\n            encoder_hidden_states=encoder_outputs.hidden_states,\r\n            encoder_attentions=encoder_outputs.attentions,\r\n            intermediate_hidden_states=decoder_outputs.intermediate_hidden_states,\r\n        )\r\n\r\n    \r\n    \r\n    #################################################################################\r\n    # DETR_OD FORWARD ###############################################################\r\n    #################################################################################\r\n    @add_start_docstrings_to_model_forward(DETR_INPUTS_DOCSTRING)\r\n    @replace_return_docstrings(output_type=DetrObjectDetectionOutput, config_class=_CONFIG_FOR_DOC)\r\n    def forward(\r\n        self,\r\n        pixel_values,\r\n        information_ids, # added to original code\r\n        pixel_mask=None,\r\n        decoder_attention_mask=None,\r\n        encoder_outputs=None,\r\n        inputs_embeds=None,\r\n        decoder_inputs_embeds=None,\r\n        labels=None,\r\n        output_attentions=None,\r\n        output_hidden_states=None,\r\n        return_dict=None,\r\n    ):\r\n        r\"\"\"\r\n        labels (`List[Dict]` of len `(batch_size,)`, *optional*):\r\n            Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the\r\n            following 2 keys: 'class_labels' and 'boxes' (the class labels and bounding boxes of an image in the batch\r\n            respectively). The class labels themselves should be a `torch.LongTensor` of len `(number of bounding boxes\r\n            in the image,)` and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image, 4)`.\r\n\r\n        Returns:\r\n\r\n        Examples:\r\n\r\n        ```python\r\n        >>> from transformers import DetrFeatureExtractor, DetrForObjectDetection\r\n        >>> import torch\r\n        >>> from PIL import Image\r\n        >>> import requests\r\n\r\n        >>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\r\n        >>> image = Image.open(requests.get(url, stream=True).raw)\r\n\r\n        >>> feature_extractor = DetrFeatureExtractor.from_pretrained(\"facebook/detr-resnet-50\")\r\n        >>> model = DetrForObjectDetection.from_pretrained(\"facebook/detr-resnet-50\")\r\n\r\n        >>> inputs = feature_extractor(images=image, return_tensors=\"pt\")\r\n        >>> outputs = model(**inputs)\r\n\r\n        >>> # convert outputs (bounding boxes and class logits) to COCO API\r\n        >>> target_sizes = torch.tensor([image.size[::-1]])\r\n        >>> results = feature_extractor.post_process(outputs, target_sizes=target_sizes)[0]\r\n\r\n        >>> for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\r\n        ...     box = [round(i, 2) for i in box.tolist()]\r\n        ...     # let's only keep detections with score > 0.9\r\n        ...     if score > 0.9:\r\n        ...         print(\r\n        ...             f\"Detected {model.config.id2label[label.item()]} with confidence \"\r\n        ...             f\"{round(score.item(), 3)} at location {box}.\"\r\n        ...         )\r\n        ```\"\"\"\r\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\r\n\r\n        if self.additional_queries in ['vanilla_imgAugm', 'vanilla']:\r\n            # vanilla and imgAugm\r\n            simulation_embeddings = None\r\n        else:\r\n            agent_ids, central_ids, sides_ids, obstacle_ids = torch.split(information_ids, 1, dim=1)\r\n            # before_encoder and after_encoder\r\n            if self.central_ascent_embeddings is None and self.sides_ascent_embeddings is None:\r\n                simulation_embeddings = self.agent_embeddings(agent_ids).repeat(1, self.num_extra_queries, 1)\r\n            # before_encoder+ and after_encoder+\r\n            elif self.central_ascent_embeddings is not None and self.sides_ascent_embeddings is not None:\r\n                agent_embeddings = self.agent_embeddings(agent_ids).repeat(1, self.num_extra_queries//4, 1)\r\n                central_ascent_embeddings = self.central_ascent_embeddings(central_ids).repeat(1, self.num_extra_queries//4, 1)\r\n                sides_ascent_embeddings = self.sides_ascent_embeddings(sides_ids).repeat(1, self.num_extra_queries//4, 1)\r\n                obstacle_presence_embeddings = self.obstacle_presence_embeddings(obstacle_ids).repeat(1, self.num_extra_queries//4, 1)\r\n                simulation_embeddings = torch.cat((agent_embeddings, central_ascent_embeddings, sides_ascent_embeddings, obstacle_presence_embeddings), dim=1)\r\n            assert simulation_embeddings.shape == (information_ids.size(0), self.num_extra_queries, self.embed_dim), f'Wrong dimensions given, got ({simulation_embeddings.shape}() but should be ({information_ids.size(0), self.num_extra_queries, self.embed_dim})'\r\n\r\n        # First, sent images through DETR base model to obtain encoder + decoder outputs\r\n        outputs = self.model(\r\n            pixel_values,\r\n            simulation_embeddings,\r\n            pixel_mask=pixel_mask,\r\n            decoder_attention_mask=decoder_attention_mask,\r\n            encoder_outputs=encoder_outputs,\r\n            inputs_embeds=inputs_embeds,\r\n            decoder_inputs_embeds=decoder_inputs_embeds,\r\n            output_attentions=output_attentions,\r\n            output_hidden_states=output_hidden_states,\r\n            return_dict=return_dict,\r\n        )\r\n\r\n        sequence_output = outputs[0]\r\n\r\n        # class logits + predicted bounding boxes\r\n        logits = self.class_labels_classifier(sequence_output)\r\n        pred_boxes = self.bbox_predictor(sequence_output).sigmoid()\r\n\r\n        loss, loss_dict, auxiliary_outputs = None, None, None\r\n        if labels is not None:\r\n            raise ValueError(\"labels can only be None in inference mode!\")\r\n\r\n        if not return_dict:\r\n            if auxiliary_outputs is not None:\r\n                output = (logits, pred_boxes) + auxiliary_outputs + outputs\r\n            else:\r\n                output = (logits, pred_boxes) + outputs\r\n            return ((loss, loss_dict) + output) if loss is not None else output\r\n\r\n        return DetrObjectDetectionOutput(\r\n            loss=loss,\r\n            loss_dict=loss_dict,\r\n            logits=logits,\r\n            pred_boxes=pred_boxes,\r\n            auxiliary_outputs=auxiliary_outputs,\r\n            last_hidden_state=outputs.last_hidden_state,\r\n            decoder_hidden_states=outputs.decoder_hidden_states,\r\n            decoder_attentions=outputs.decoder_attentions,\r\n            cross_attentions=outputs.cross_attentions,\r\n            encoder_last_hidden_state=outputs.encoder_last_hidden_state,\r\n            encoder_hidden_states=outputs.encoder_hidden_states,\r\n            encoder_attentions=outputs.encoder_attentions,\r\n        )\r\n\r\n\r\nclass DetrSinePositionEmbedding_custom(torch.nn.Module):\r\n    \"\"\"\r\n    This is a more standard version of the position embedding, very similar to the one used by the Attention is all you\r\n    need paper, generalized to work on images.\r\n    \"\"\"\r\n\r\n    def __init__(self, embedding_dim=64, temperature=10000, normalize=False, scale=None, num_extra_queries=0):\r\n        super().__init__()\r\n        self.embedding_dim = embedding_dim\r\n        self.temperature = temperature\r\n        self.normalize = normalize\r\n        if scale is not None and normalize is False:\r\n            raise ValueError(\"normalize should be True if scale is passed\")\r\n        if scale is None:\r\n            scale = 2 * math.pi\r\n        self.scale = scale\r\n        self.num_extra_queries = num_extra_queries\r\n        assert self.num_extra_queries % 2 == 0, 'self.num_extra_queries must be divisible by 2 (sin-cos positional encodings)'\r\n\r\n    def forward(self, pixel_values, pixel_mask):\r\n        if pixel_mask is None:\r\n            raise ValueError(\"No pixel mask provided\")\r\n        y_embed = pixel_mask.cumsum(1, dtype=torch.float32)\r\n        x_embed = pixel_mask.cumsum(2, dtype=torch.float32)\r\n\r\n        normalizer_pix_x = x_embed[:, :, -1:][0,0,0]\r\n        normalizer_pix_y = y_embed[:, -1:, :][0,0,0]\r\n        normalizer_pix = max(normalizer_pix_x, normalizer_pix_y)\r\n\r\n        normalizer = normalizer_pix + self.num_extra_queries\r\n\r\n        extend = torch.arange(normalizer_pix+1, normalizer+1, dtype=torch.float32, device=pixel_values.device)\r\n        extend = torch.tile(extend, (pixel_values.shape[0], 1))\r\n\r\n        if self.normalize:\r\n            y_embed = y_embed / (y_embed[:, -1:, :] + 1e-6) * self.scale\r\n            x_embed = x_embed / (x_embed[:, :, -1:] + 1e-6) * self.scale\r\n\r\n            extend = extend / normalizer_pix * self.scale # or normalizer\r\n\r\n        dim_t = torch.arange(self.embedding_dim, dtype=torch.float32, device=pixel_values.device)\r\n        dim_t = self.temperature ** (2 * torch.div(dim_t, 2, rounding_mode=\"floor\") / self.embedding_dim)\r\n\r\n        pos_x = x_embed[:, :, :, None] / dim_t\r\n        pos_y = y_embed[:, :, :, None] / dim_t\r\n        extend = extend[:, :, None] / dim_t\r\n        pos_x = torch.stack((pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos()), dim=4).flatten(3)\r\n        pos_y = torch.stack((pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos()), dim=4).flatten(3)\r\n        extend = torch.stack((extend[:, :, 0::2].sin(), extend[:, :, 1::2].cos()), dim=3).flatten(2)\r\n        extend = torch.cat((extend, extend), dim=2).permute(0, 2, 1)\r\n        pos = torch.cat((pos_y, pos_x), dim=3).permute(0, 3, 1, 2)\r\n        pos = pos.flatten(2)\r\n        pos = torch.cat((pos, extend), dim=2)\r\n        return pos\r\n\r\n\r\ndef xywhn2xyxy(x, w=640, h=640, padw=0, padh=0):\r\n    # Convert nx4 boxes from [x, y, w, h] normalized to [x1, y1, x2, y2] where xy1=top-left, xy2=bottom-right\r\n    y = x.clone() if isinstance(x, torch.Tensor) else np.copy(x)\r\n    y[..., 0] = w * (x[..., 0] - x[..., 2] / 2) + padw  # top left x\r\n    y[..., 1] = h * (x[..., 1] - x[..., 3] / 2) + padh  # top left y\r\n    y[..., 2] = w * (x[..., 0] + x[..., 2] / 2) + padw  # bottom right x\r\n    y[..., 3] = h * (x[..., 1] + x[..., 3] / 2) + padh  # bottom right y\r\n    return y\r\n\r\n\r\n# mock inputs\r\ninput_image = torch.randn((1, 3, 1536, 640))\r\nnum_agents = 10\r\n\r\nmodel = Detr_custom()\r\nagentIdDict = {10:0, 30:1, 50: 2}\r\nall_pred_boxes, all_confidences = [], []\r\n\r\n# object detection module\r\n# module = load_ckpt(module, ckpt_path = CONFIG['from_ckpt_path'])\r\n\r\n# module.to(f'cuda:{CUDA_DEVICE}')\r\n# module.eval()\r\n\r\nagentId = agentIdDict[num_agents] # optionally '+'-info\r\ncentral_id, sides_id, obstacle_id = 0,0,0 # dummies for now\r\nsuppl_info = torch.LongTensor([agentId, central_id, sides_id, obstacle_id]).unsqueeze(0)\r\nprediction = model(input_image, suppl_info, labels=None)\r\n\r\n# Find predicted boxes\r\nfor i in range(prediction.logits.size(0)):\r\n    scores = torch.softmax(prediction.logits[i].detach(), dim=-1)\r\n    argmaxes = torch.argmax(scores, dim=-1)\r\n    box_detection_indices = torch.argwhere(argmaxes == 0).squeeze() # select only boxes with class 0 (class 1 == 'no-object')\r\n    selected_scores = scores[box_detection_indices, 0]\r\n    # assert torch.all(selected_scores > scores[box_detection_indices, 1])\r\n    box_proposals_per_batch = prediction.pred_boxes[i].detach()\r\n    selected_boxes = box_proposals_per_batch[box_detection_indices]\r\n\r\n    # for score predictions consisting of a single number, get the dimensions right\r\n    if selected_scores.ndim==0:\r\n        selected_boxes, selected_scores = selected_boxes.unsqueeze(0), selected_scores.unsqueeze(0)\r\n    \r\n    all_pred_boxes.append(xywhn2xyxy(selected_boxes, input_image.size(3), input_image.size(2)).detach().cpu())\r\n    all_confidences.append(selected_scores.cpu())\r\n    \r\nOUT = [all_pred_boxes, all_confidences]\r\n\r\n\r\n\r\n#package_path = f\"{virt_env_path}\\\\lib\\\\site-packages\\\\\"\r\n#sys.path.append(package_path)\r\n\r\n#import pytorch_lightning\r\n#import torchmetrics\r\n# TODO additional info....\r\n\r\n\r\n\r\n\"\"\"\r\n# checkpoint loading\r\ndef load_ckpt(module: LightningModule, ckpt_path):\r\n    CKPT_PATH = SEP.join(['checkpoints', ckpt_path])\r\n    model_file_path = [file for file in os.listdir(CKPT_PATH) if file.endswith('.ckpt') and not file.startswith('last')]\r\n    assert len(model_file_path) == 1\r\n    CKPT_PATH = SEP.join([CKPT_PATH, model_file_path[0]])\r\n    state_dict = torch.load(CKPT_PATH)['state_dict']\r\n    module_state_dict = module.state_dict()\r\n\r\n    mkeys_missing_in_loaded = [module_key for module_key in list(module_state_dict.keys()) if module_key not in list(state_dict.keys())]\r\n    lkeys_missing_in_module = [loaded_key for loaded_key in list(state_dict.keys()) if loaded_key not in list(module_state_dict.keys())]\r\n    assert len(mkeys_missing_in_loaded) < 10 or len(lkeys_missing_in_module) < 10, 'Checkpoint loading went probably wrong...'\r\n\r\n    load_dict = OrderedDict()\r\n    for key, tensor in module_state_dict.items():\r\n        if key in state_dict.keys() and tensor.size()==state_dict[key].size():\r\n            load_dict[key] = state_dict[key]\r\n        else:\r\n            load_dict[key] = tensor\r\n\r\n    module.load_state_dict(load_dict)\r\n\r\n    return module\r\n\"\"\"\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "d74759e5f4d44522994e5c5998e4c4a0",
      "Inputs": [
        {
          "Id": "dca02c3251ea41caa8d4422812e0e8a4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "08893b5e54734b3caad575d5912b3351",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b16ad8837a341588a597c49cefa6ccc",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8d8ddc0b50634f81a8085b1c34f20995",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport System\r\nfrom System.IO import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('System.Drawing')\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nfilePath = IN[0]\r\n\r\n#result = Image.FromFile(filePath)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = None#result",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "7eb1d8d7c7354628a00d62fb83a001ae",
      "Inputs": [
        {
          "Id": "85b64fa84ec9460c9a0c0c2acee2d42c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9adc1c607ba44122bd2b42fde9ae63d2",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.WatchImageCore, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "37f6b588ac2845e4a13409424528ad28",
      "Inputs": [
        {
          "Id": "e13278d629da419e9cc902a3b6d80636",
          "Name": "image",
          "Description": "image",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4016a28457c44ba9b89b02e42e069fd2",
          "Name": "image",
          "Description": "image",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Previews an image"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "12895c35f82c48e393382cce9405866d",
      "Inputs": [
        {
          "Id": "1cd2e56a2d41400987270ed1b3359573",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5fcc8d0a35d44be3848ec18ddadf5106",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    }
  ],
  "Connectors": [
    {
      "Start": "0b572195c4804c18a64f36fa000d3217",
      "End": "e2e02ee2610e403caa4a41a8023cd8f3",
      "Id": "15ca5e7e7e8c4bf5aefcae35a329adfd"
    },
    {
      "Start": "0b572195c4804c18a64f36fa000d3217",
      "End": "3a011102234f42c4b74e9c62279d45f4",
      "Id": "2346e655969140e5b1afeb46d038f778"
    },
    {
      "Start": "645ffdbbd04b407ba2aeb46ca5ab76ec",
      "End": "a2ffa24a8d19403b8ae511ff9c4c4d52",
      "Id": "9b0e40b96daa402aa805f2c0bd0704fd"
    },
    {
      "Start": "5f6d3e15c28d4dbabb280bdded66e5e8",
      "End": "93ae402c19a0452e81c79dca18292805",
      "Id": "a64cda9b1de84234a8be419b4f0c0d41"
    },
    {
      "Start": "905a14a04b0046599157d19ffedc3987",
      "End": "ac6a271a0aaa4c3991240db5bbf343c1",
      "Id": "11f88bdd4d874f6bb9b1d651037b50e1"
    },
    {
      "Start": "902a109168e44eb5b2a8fb7d3f1f9533",
      "End": "a9f106b5f53a4c2db153f78670631d84",
      "Id": "50877c015ec64ddca9c0b39f7fa45d1c"
    },
    {
      "Start": "a82ac3fd98cb4b90acc377a917e51dd0",
      "End": "7faf4c334a15479ca52cd21d13b9ac50",
      "Id": "944695a1698c444abafef5cd7e6ce426"
    },
    {
      "Start": "bfa9577467c6426a9ceac6e10c957b9a",
      "End": "e154bc06cdbf4fef9360d5ce95419d27",
      "Id": "215a194d17ea446d8fe05c91e82c237d"
    },
    {
      "Start": "69b0de06bd7448e4b6129fb0771528f2",
      "End": "e9a35393200549b8a4832dc9dae0dad0",
      "Id": "0ab4f090825e48ad84bd41eb03f22f57"
    },
    {
      "Start": "ad86877859104ddf97f25650d09add30",
      "End": "4bfb5b09a34c4e168619ec2fbf9feeec",
      "Id": "738a1873fc654d2bb07d2566e32434d6"
    },
    {
      "Start": "53c04e998cc340c2a5ffd57985de6635",
      "End": "97ad01270b8c4751a8b1a66ff9a45438",
      "Id": "c77965f629a149c4aeb3cf5868002e5b"
    },
    {
      "Start": "e18afde8abd74940bd2c66f9ea6ebf89",
      "End": "7ed1373472f64d34ae9b91b844d21271",
      "Id": "7169d4a8f77e45a3980a79acd6f88fe9"
    },
    {
      "Start": "19548bb122024254b787e58c96f9d4f3",
      "End": "026105fc13a14e7bb9f1e12c2e9d9cf9",
      "Id": "476cbdc709534b7fa58e524566c3c167"
    },
    {
      "Start": "ed3a6a754c09495a88c4ef637f16388c",
      "End": "5a667bc430d1487494522b182c28b37a",
      "Id": "045b192cd2e447c08db24d98cde44c95"
    },
    {
      "Start": "ed3a6a754c09495a88c4ef637f16388c",
      "End": "0d40eb4ae6bf428da5d97e8d0ea57ce7",
      "Id": "05bd07a06eb146e6a34bafe3497ff96f"
    },
    {
      "Start": "6062cb01d866449c9a333bed72805252",
      "End": "dd4dc8b63f5c4a7ab573e1e1ad4959e3",
      "Id": "e6f7fc74a6854868b6e0570b04353bc6"
    },
    {
      "Start": "abaaf6230eea490992861ca1bfdabf08",
      "End": "94736aca592a42159035118e9bd60aa0",
      "Id": "3a9f5661546b4ce39c2e4f9c987e9b9b"
    },
    {
      "Start": "80de50804edc41adbea43dfcfe200c07",
      "End": "c59e8c4b465d4d638cd2727b4e68dd34",
      "Id": "89fac71f03b14c61bd73813327f81802"
    },
    {
      "Start": "8a37c7b8b3534e6b9729f187e935e3f2",
      "End": "66d99352aafb4c61b307f1b9d065a245",
      "Id": "78d6ef497cff42e7adbe3039a319f0d1"
    },
    {
      "Start": "15ddd1f9c5c54f29b02ed6fddad84f98",
      "End": "0ab31926bb6a4dd0a5f99839ef8e237c",
      "Id": "7e3d2f80253143f4bd380adeb7b115ab"
    },
    {
      "Start": "cbf5cc635b0d4381842bd1ab4e83de78",
      "End": "e51c0990fb9e4fae9d29cf555014c2d6",
      "Id": "f44492e5c3374b54b5e373e4ace1230b"
    },
    {
      "Start": "2e981f7c2bb64f1d85493f8c0ecd0bdc",
      "End": "3829441d66e946ec82bdd321ac57691f",
      "Id": "194a90342ef442f0b3ba51246171ea80"
    },
    {
      "Start": "1b4b69dec30e439b839b0b8aba428a52",
      "End": "29561ad3f79f4a77913bffc9ccf48eb6",
      "Id": "5b9d9d811f6e4be88787c7fe8b945127"
    },
    {
      "Start": "1b4b69dec30e439b839b0b8aba428a52",
      "End": "e1e646faacbc458eafc72829db4b82c3",
      "Id": "a25280f853dc41c7968902b545b082b2"
    },
    {
      "Start": "c7e5e94608a64df095aab7a895b1f1ef",
      "End": "cdebd4fa74a1498f8979027fabe97bfb",
      "Id": "c9d0042b39924eb8aa5d6a6676d59824"
    },
    {
      "Start": "8fe2ca711e1f4a4a8a09cfe249ee815e",
      "End": "7bd1986587e6453a93efc48ad8e4c674",
      "Id": "fd18a02d19584b29a9756ac42219bdbd"
    },
    {
      "Start": "43684ba876684d278f1edd08f40df9b4",
      "End": "063101a45c3e4ca398535cbc91481c4d",
      "Id": "88c5bd69d4464a4cb894d985ea52f5ab"
    },
    {
      "Start": "6ee348c6aabb4256867cfecded10c5cd",
      "End": "46a4a4a71956456494750a48b6eca36a",
      "Id": "160d20469f4e45b6973968ea8a34c6f3"
    },
    {
      "Start": "d315704e7cec4220bdbec08f27818ba4",
      "End": "f57123c7607148838f19305406aa29e4",
      "Id": "20e4cfde3bc74123a224b23a73c80154"
    },
    {
      "Start": "552638be7b374455ae8ab53b85ea72f1",
      "End": "baee9d0decc94186a5bfdb48b9abbbd5",
      "Id": "d8b803393dc84f42a2d950cbdd4ee4cd"
    },
    {
      "Start": "948d36e87d6749a0b83a45c33ff4ce78",
      "End": "626b0a42593f456caa490eadcced9044",
      "Id": "8665ac46896b410396e3f01ace191a6f"
    },
    {
      "Start": "f730852870624c368487e690bdab275f",
      "End": "47bc4fd5d01e4fff865cd5802d85cd06",
      "Id": "55d316362b5a4f6c968f7a2800b38063"
    },
    {
      "Start": "cac4690f59024bf2b086d3a832f5c08e",
      "End": "3e864c454abb49d388c3f9ecc4ea181d",
      "Id": "969a426b56df4d0c80ab8068dce5c5a6"
    },
    {
      "Start": "8154bd0aa63a4bc6a06a9ba245626224",
      "End": "d28b5e53f4c74e919ffdb028890f0fd4",
      "Id": "6811f337c5cf48c894d88cec0ce215f1"
    },
    {
      "Start": "8154bd0aa63a4bc6a06a9ba245626224",
      "End": "a218fe3fdea948e4b6df7d34f5e73e4d",
      "Id": "f5a1e728a0254db8ae2b60ace4aee176"
    },
    {
      "Start": "4e24ef82048b44028aff57dc2f0a666e",
      "End": "6869c76d46d041009be42161378a9a22",
      "Id": "7f5aa0a10a60477dabf2fcfabea45062"
    },
    {
      "Start": "966e76a808dc457aa437427052de2ea0",
      "End": "65ab6c93d9c34ff19f1dcd2641da7a8d",
      "Id": "2e120217c1c5442f9ddc390ba03bc590"
    },
    {
      "Start": "e9e416f150ca477f8f408d9c658c002e",
      "End": "66caa2cdacdc49d9b496f77217253990",
      "Id": "7ca43fbdbebb4873b7c09c647606aa6a"
    },
    {
      "Start": "55de3ad9e11a4349a9922b8af3af16a5",
      "End": "c771ffd098194cc984325f2c5a9e9676",
      "Id": "6eef78ad5cf7480f961180ea3ff47e5b"
    },
    {
      "Start": "7dacc02e4598484c911ef148311ea9be",
      "End": "c9359ab310644dc086eac78ab28cc4b2",
      "Id": "9b07e954f0cd4f07a3898229381b99d5"
    },
    {
      "Start": "3a799cc98d0f410db77ca2597b636813",
      "End": "f15be15f312a4fd5813e4b588e504fac",
      "Id": "daa9e974da9e44bba678e6558fb02b98"
    },
    {
      "Start": "1fa72074c51247d4910e1806030fab8b",
      "End": "2d59a402367840c98132474ad1e90c1f",
      "Id": "f3e4cc5134dc4002a3610f9f749d9f52"
    },
    {
      "Start": "e19572f9037d46bd8f30b7520cd85231",
      "End": "1b327040b6964e26a9f5c2e4641d7892",
      "Id": "61a86687988f4e948cce1c8a0e65fe2f"
    },
    {
      "Start": "ae5bc0821e9441b5891dd32272291838",
      "End": "3aa5d11ff4444e428420af3b2e3cdd56",
      "Id": "4b247f6317284fe4ae0375d3abbb6299"
    },
    {
      "Start": "a59e80708ad645afaad9f814f734d994",
      "End": "b75a513a18a2443e9e5b482d433dd3b0",
      "Id": "c617498b3ba34aa1a6f08fd948d1e27c"
    },
    {
      "Start": "6033a5f85f334c4fb776e0c16b4ae024",
      "End": "1531865d835b48eeb611f3547f3b17b5",
      "Id": "634ca09fcbfa422abd0e4edee1a3c309"
    },
    {
      "Start": "4b8e3c57c9a9452fb16f3bdd0fa3f8a3",
      "End": "ccbaad2d90ed458399ee27dcf8a7277f",
      "Id": "d20464350ca94b8cb5ede0cb1e99927b"
    },
    {
      "Start": "207a1fb498fa40f89444e9744bf923a8",
      "End": "08c938a77a284acb8817538a14186f0a",
      "Id": "1373add95b0c43e0861f8913e3fc95b7"
    },
    {
      "Start": "1a27d7e77ab7435ba8fe804d489488d3",
      "End": "16b0f9a0c24047f78d3c9d42d62e6c18",
      "Id": "6252a87149db4540a4fa3b3f90d409ec"
    },
    {
      "Start": "a35eb04cfbf644728344549c360d5a7c",
      "End": "b09b25e0cb85442d91900ac683549540",
      "Id": "6c34e856b8e046e381195aea1f549f72"
    },
    {
      "Start": "3a09cf818c4b460cbd5fda45829eece0",
      "End": "2410259915be43ac9623e7086ae5b07a",
      "Id": "d51945b8caf64d4bad9655ee2758bdba"
    },
    {
      "Start": "3a09cf818c4b460cbd5fda45829eece0",
      "End": "1fada0f3804b4eceb417996a9e2746ca",
      "Id": "24b4647986c841c1add56ea30a75239e"
    },
    {
      "Start": "629c161841ad43edb51f6634a3b0d556",
      "End": "314e14a12fdc49f29f76991b258ef613",
      "Id": "3bafcc12d1f44dfe9a4e2f01a6bedf6a"
    },
    {
      "Start": "629c161841ad43edb51f6634a3b0d556",
      "End": "e0f0889a88024757bcc5c6a7e391a19a",
      "Id": "45aa6bf04f3f4bfc91167a7d8e78f1ae"
    },
    {
      "Start": "450779b2d2c44c0097e98feb350c5b2d",
      "End": "f90c08daa0d34091b05af87c23713ace",
      "Id": "8c010f2b4e014eb497f364b85de249bf"
    },
    {
      "Start": "6372d02a3d16452d94e9ed01bf3c69bc",
      "End": "2f97a8999d554d1da0d6e915ed19c14a",
      "Id": "3a4af53c4d2d43a7ad2dac90bc3b87a3"
    },
    {
      "Start": "6372d02a3d16452d94e9ed01bf3c69bc",
      "End": "c0c35cfd70394729a390e2d252ce7fc2",
      "Id": "64d6aff30c444291affd42f8eb7d49c4"
    },
    {
      "Start": "34133f80ce7544b59c160eef703f7c5e",
      "End": "39db69ce132448b999ef58b7008685f7",
      "Id": "dbdd751bb75449228deda79d9860dfd0"
    },
    {
      "Start": "3aa8cb485fbf42db9c4ad0f9d3aa6b88",
      "End": "28e30d74b1cb41c99c75fb109b48307b",
      "Id": "ed71c5d144dc4313a2b0999a18b0f9a3"
    },
    {
      "Start": "2668e6fe979844a48fe168791a48e88c",
      "End": "a5123abf80ec41bf864f24584a36f9a5",
      "Id": "4f1317b105014fc78f4780aa5b0ac4c8"
    },
    {
      "Start": "035ebd166e89469ca54370bc7958b9d7",
      "End": "3b63db33461249a0880fed221a26fee1",
      "Id": "b9bd22dcca794197a28bea1bb6451a68"
    },
    {
      "Start": "dc8a6772f9b84ac3bc5c38263b478ee7",
      "End": "05ad15395ca14aed9df1f414f3f76f23",
      "Id": "4ff02a0d061d40968b991114f5fd5781"
    },
    {
      "Start": "dc8a6772f9b84ac3bc5c38263b478ee7",
      "End": "600b50bf72a14777a2e274b8d21a9cab",
      "Id": "890cf311a2db4ae19cef5e6caa80bb97"
    },
    {
      "Start": "1729df3e99654d36badfaa727c3ea9e8",
      "End": "7b5eb51eefed43b5ac17505de7d87f67",
      "Id": "efda997ed996466aa163fd33db26f4a8"
    },
    {
      "Start": "4136017b87a541bca42c1019e704ba96",
      "End": "0a9f101c21f54747ad313a47b414ef06",
      "Id": "1b338063a3b84b8498ef946c69877ca5"
    },
    {
      "Start": "ee336fb1de8b4fefa7ceb7b92ecba990",
      "End": "5943cd6dee264bb4a36f9fb626bbf566",
      "Id": "eca890f1f53c4929ba045e523052f6ef"
    },
    {
      "Start": "47b3dacf2ac64748bbdb421d110d41af",
      "End": "a2ad106d3c294f04b9e1d80d0aa92887",
      "Id": "600562550ab84ad693640d5e5b4508c6"
    },
    {
      "Start": "dc6ea25e539d4257b1e1499290f7cf0f",
      "End": "cb41d47510df402ba4184879b18665cd",
      "Id": "6bc225b7cf7c48e7af1b5a10647a01c0"
    },
    {
      "Start": "6aefd4f5903246899db093c7d1491994",
      "End": "7af0da1fea204424a5e6e2b2f447c68e",
      "Id": "93a4f1e30ab24e73b1a34f689fb9b4d7"
    },
    {
      "Start": "6aefd4f5903246899db093c7d1491994",
      "End": "08893b5e54734b3caad575d5912b3351",
      "Id": "749cbcf72918493782b431f7710e569c"
    },
    {
      "Start": "1bcd319935ab4cc0ace18fce5a65edd3",
      "End": "8489e22e20ef477da5fcc885d065a92b",
      "Id": "dec90c448b384d74a5aaf2f254310ddc"
    },
    {
      "Start": "1bcd319935ab4cc0ace18fce5a65edd3",
      "End": "af6e8d9f788346a3aba385b68f5d1b4d",
      "Id": "4feca66e080546a890d434a5efe5698e"
    },
    {
      "Start": "23b28942039743f79e2f17a3e0111fbf",
      "End": "7e6517a4541c473f9d5460790eba3905",
      "Id": "6281287de8c54502b870fb347a6017c9"
    },
    {
      "Start": "0f325c127efe4f37bd98ea6cfdeddaf6",
      "End": "8bc2d2fa7404425da4aecf65c1f7bc5a",
      "Id": "09a55c73c5e648a0a13895c7a36c99d5"
    },
    {
      "Start": "7ea9135aaa6e4b3098aaa62b6276da9e",
      "End": "16605ca83d1c48bca00648337496d565",
      "Id": "4a9324eb7f33431c9c13eb006e6f2f43"
    },
    {
      "Start": "5bb656a2506446ca885a02e89555784e",
      "End": "012141781dd24240b14d01e6ed97b315",
      "Id": "7ad5d2ade501483bad4360f44180ea72"
    },
    {
      "Start": "81fd3db74b7c4351906587226bb5e5ef",
      "End": "d222358b42194394b9c17ff1fdd59d63",
      "Id": "1b2a7f5a96354333b5f7b7b7022fa809"
    },
    {
      "Start": "0407e9fdb89945a28e0cbe301feb55e7",
      "End": "64fd7998e3fb4fae822a421fc022e59b",
      "Id": "2cefefd6044d43b5896cc38777aec8e2"
    },
    {
      "Start": "bf70c9d3b2c946cfb6e764cb2cf7afe0",
      "End": "02388a5990284d1d89322bb4fdd6e907",
      "Id": "d7ad9e523cec490b83e5793115ffad7b"
    },
    {
      "Start": "e5b98e96669f4b6a8643277fa88b4950",
      "End": "6645c1b7c3dc47029c151d0fb4dfc231",
      "Id": "5191042592b14782b1da75f80e31617a"
    },
    {
      "Start": "923eeb915cce4a1b8cf0c54da3a70626",
      "End": "02f222dcd5c84722a69e1910c9dc07d2",
      "Id": "9c15a54cc48743528f2e85f51f9bdd46"
    },
    {
      "Start": "7ba224b080834777a4d12601f7de2e58",
      "End": "89feb6f05d6f4b038ffabeec46f79f85",
      "Id": "f18137cab55d4f9d94608c075fa1f290"
    },
    {
      "Start": "28eb855acc8f4743b9883cf342f0dcd1",
      "End": "100c1268487848c9bc8cf71543704b58",
      "Id": "6878ad12b13f44ee9f7daefbdec20bf6"
    },
    {
      "Start": "f96cf5604f6741448773cccb5f0d06ea",
      "End": "c50ae48f0be74a2ea29725a615a5fc4d",
      "Id": "2a485f34e2484f6a83c5a488557614fb"
    },
    {
      "Start": "585bad45cb234d09a59399e022769c39",
      "End": "8647f07ddeb340daab691100500773c4",
      "Id": "7d89c15ffba24706971830be7178a3b9"
    },
    {
      "Start": "9a3b21389e70441ea4c4f8c71d199426",
      "End": "f6039fcf6f0543a9a8fd3ed259805b6d",
      "Id": "8c5a4c2ee5ca467f96659cd36fa97967"
    },
    {
      "Start": "4788e5f1f80a457a969b204eca49c10a",
      "End": "d8335bf1bbc54c8db4599b9866147da4",
      "Id": "267aa33073fe47f0b3466ee9f830208d"
    },
    {
      "Start": "87f5679f69a44fa49963841730803c0d",
      "End": "cb0739e1728a4df8b68c39af95e8bf2b",
      "Id": "b3d1cb14c7844ada964d862584e1db69"
    },
    {
      "Start": "670683c8bd6141ac946defbe0c0ef614",
      "End": "2890f8fe628d4ab5a8bf1d3c9ecbc7c8",
      "Id": "b6d708aa71594b8788044b901ff8dbc2"
    },
    {
      "Start": "926055daa223474689f06d7dce81a35a",
      "End": "08a597458f414f65a0f3d49535df3416",
      "Id": "79b0ea8440934cf7a500e4ff57a53911"
    },
    {
      "Start": "99f5c26add504ce3b71467016b17deb7",
      "End": "62f0dbe3173747a8a37ef3d71bd3f452",
      "Id": "d0011741f1ec415588c55a2d5e221366"
    },
    {
      "Start": "bfbc3fbfe26646d3a9578296115349be",
      "End": "57654b6cc4e64ec38c13eb37369c04ee",
      "Id": "0c3c2265676b4f379c42d75b8314749c"
    },
    {
      "Start": "e85435ce2515489fb65412d0c0573773",
      "End": "84aab32bd759494ab270eb3982f99aa5",
      "Id": "0d5f5b2a110841ffb99c45bab0f4dbe2"
    },
    {
      "Start": "b6545340be0940e4a3ad93cbd06f6788",
      "End": "85c0105f09e54ba8bab252ff45f399b1",
      "Id": "12d4ba6ef2d2418495e5515de0b35c66"
    },
    {
      "Start": "4c5abc8b627940428c9824c918155ae9",
      "End": "4eb00c5d8c5349a7bc8c29c8fb622773",
      "Id": "3a46ca98b36a44b69a3e078191563060"
    },
    {
      "Start": "4c5abc8b627940428c9824c918155ae9",
      "End": "12753406870d409ca0e140d63db7303a",
      "Id": "04130916c0e0492b99a084d381fa89dd"
    },
    {
      "Start": "4c5abc8b627940428c9824c918155ae9",
      "End": "b070ffc62bde4e7b9aff961ec5299155",
      "Id": "3db86a3bb3ec4a37a45d7e413fa5bfc5"
    },
    {
      "Start": "e880596f74c640bca76454d9f8fbac8d",
      "End": "fc6f8cf9ebb8499c82e676e20d857214",
      "Id": "8f4bcb345c8a4cbda7e193d8ab211275"
    },
    {
      "Start": "21730a44c5ed47d88df551a7b793a6be",
      "End": "c5534b50d3e84e0ba316edb5d3353888",
      "Id": "a553515c0ba44dc28f8a2f034d139519"
    },
    {
      "Start": "514ab72abfc243ccb530b04ee636d206",
      "End": "101375a3eb2f4aed990b04f2965f1a08",
      "Id": "1d52584e971645148b3a7164f753c414"
    },
    {
      "Start": "8c281b5d1c184a839207f6a4ec24acd4",
      "End": "4746bb5b88c0465ab42c7ccc08d53184",
      "Id": "a8b01ff687ac4232a32009dd002ed25d"
    },
    {
      "Start": "374165522b994b81aa42cba060a0a378",
      "End": "4b16ad8837a341588a597c49cefa6ccc",
      "Id": "229a287fb3f8416082d7ad86941dcc80"
    },
    {
      "Start": "a3b514c146274a65a67af8412db26557",
      "End": "c181b52bd53f4e18afb9f01a86c1986a",
      "Id": "fcdfa7d9b59a41d79f1b40abe1b8ed00"
    },
    {
      "Start": "f1887f97737248ab9b37cef52484c13d",
      "End": "dca02c3251ea41caa8d4422812e0e8a4",
      "Id": "353a2a3fa6944a9596cd3e6adf76084c"
    },
    {
      "Start": "8d8ddc0b50634f81a8085b1c34f20995",
      "End": "85b64fa84ec9460c9a0c0c2acee2d42c",
      "Id": "cb504233a0714029b9f9379c4ab16082"
    },
    {
      "Start": "8d8ddc0b50634f81a8085b1c34f20995",
      "End": "1cd2e56a2d41400987270ed1b3359573",
      "Id": "4a61fa400f9749be9ee0a5e54aea0246"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "91184f7c047c40aaa110ded98cf3e461",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -141.13631875421493,
        "Y": -109.3671176710352
      },
      {
        "ShowGeometry": true,
        "Name": "Wall Types",
        "Id": "16ebeca796054d8f923afbaf528319bd",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1149.7001804179708
      },
      {
        "ShowGeometry": true,
        "Name": "Wall Height",
        "Id": "5a1fb6986487418a80057656a50ca8a1",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1191.3984774603121,
        "Y": -571.62935031067377
      },
      {
        "ShowGeometry": true,
        "Name": "Base Script",
        "Id": "b94ab649f1304a028e41b8d07f94707c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 746.01449490546383,
        "Y": 261.6838089468115
      },
      {
        "ShowGeometry": true,
        "Name": "Structural Column Types",
        "Id": "d7a859123a084f57bf9f6c049349a8b5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1245.1718717893816
      },
      {
        "ShowGeometry": true,
        "Name": "Train Family Type",
        "Id": "066869354e7b44b8a9563afcbb0780e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1531.5869459036139
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements at Level",
        "Id": "b5296ebfad454f98b72cc564ba0e8214",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 88.833482042055948,
        "Y": -31.850341570547243
      },
      {
        "ShowGeometry": true,
        "Name": "Delete All Elements Before Each Run",
        "Id": "b946a6d5f8134cbd98d05f5965d1fa06",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -45.166517957944052,
        "Y": 57.808503450944727
      },
      {
        "ShowGeometry": true,
        "Name": "No of Column Rows",
        "Id": "d81e3a3ec50544a4a711c14418961e25",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1191.3984774603121,
        "Y": -698.30457823077268
      },
      {
        "ShowGeometry": true,
        "Name": "Escalator Family Type",
        "Id": "a546ad92001346f5bb198c55452494d8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1436.1152545322032
      },
      {
        "ShowGeometry": true,
        "Name": "Floor Types",
        "Id": "52c8935a887d4c54825856a370029332",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1054.22848904656
      },
      {
        "ShowGeometry": true,
        "Name": "Main Create Script",
        "Id": "5e46294564674e7d8151f3a2a1c328fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1330.0278325988272,
        "Y": 421.469639373676
      },
      {
        "ShowGeometry": true,
        "Name": "Platform Length Calc Script",
        "Id": "6f587da72e1149979c6a2c4c9f2c0d40",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1597.648305171308,
        "Y": 716.72266556132706
      },
      {
        "ShowGeometry": true,
        "Name": "Terminus",
        "Id": "f720c80e6f1d4f21bebdcb9555f2933e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2048.6950025025435,
        "Y": 705.76686449726367
      },
      {
        "ShowGeometry": true,
        "Name": "Max. Train Length",
        "Id": "3cb6533b3fa5459f9123ae291f780de2",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2047.8268434585561,
        "Y": 623.79144742266453
      },
      {
        "ShowGeometry": true,
        "Name": "Bumper Length",
        "Id": "2f3255ccafbc41a380f658fde805b3c4",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2048.9987394779209,
        "Y": 782.05252935725969
      },
      {
        "ShowGeometry": true,
        "Name": "Standard Length",
        "Id": "7b33e5c900614f629567cf0acb30494b",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2048.2594895523507,
        "Y": 856.214684983115
      },
      {
        "ShowGeometry": true,
        "Name": "Width Calc Script",
        "Id": "af774d71e51647caae282fc088bf06bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1072.9044209511844,
        "Y": -25.83139254058301
      },
      {
        "ShowGeometry": true,
        "Name": "Traffic Level i",
        "Id": "3949bf9b3e7a4dcfb52c38c63d41f89c",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 125.28554184148425
      },
      {
        "ShowGeometry": true,
        "Name": "Local Traffic",
        "Id": "2122344a6c6c4f5e900634e71d62c5eb",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 199.23125578214945
      },
      {
        "ShowGeometry": true,
        "Name": "Elevator Length [m]",
        "Id": "859c366329bb4d16875a776dac8f000a",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.77443748541,
        "Y": -464.2965870594096
      },
      {
        "ShowGeometry": true,
        "Name": "Velocity [km/h]",
        "Id": "04530e04386248d3a3affe3762d7660b",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": -73.605886039845927
      },
      {
        "ShowGeometry": true,
        "Name": "Train Frequency [n/h]",
        "Id": "b420fc1637f44fc5a6fd8e9929a525df",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.9580825152143,
        "Y": 925.09356706682445
      },
      {
        "ShowGeometry": true,
        "Name": "Elevator Position",
        "Id": "d5fd982584d446088314965fc077506a",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.77443748541,
        "Y": -535.01991533402929
      },
      {
        "ShowGeometry": true,
        "Name": "ATM Family Type",
        "Id": "764f7e4dd112489fab080cb3a02a11f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1722.5303286464355
      },
      {
        "ShowGeometry": true,
        "Name": "Ticketmachine Family Type",
        "Id": "a7e8c75ff74c43c1b3ffb9bbdb322529",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1818.0020200178462
      },
      {
        "ShowGeometry": true,
        "Name": "Exit  X Offset [m]",
        "Id": "619194ee147a46bf869e3e6373ed406f",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -817.1416770138203,
        "Y": 393.87494798834211
      },
      {
        "ShowGeometry": true,
        "Name": "Ticketmachine X Offset [m]",
        "Id": "5f4f339b8e3e4864bf9f6a99777f8b4c",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -817.1416770138203,
        "Y": 559.44945225725792
      },
      {
        "ShowGeometry": true,
        "Name": "Escalators Facing Inwards",
        "Id": "e15d5903d5f94bfabbbc763e0f037f08",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1971.77443748541,
        "Y": -747.18990015788654
      },
      {
        "ShowGeometry": true,
        "Name": "Store Family Type",
        "Id": "073e994e28f14c03b35614344fb596c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1913.473711389257
      },
      {
        "ShowGeometry": true,
        "Name": "Type Activation Script",
        "Id": "0bc8b8aefcb94b0f851e4c51d941ae82",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1453.8800261427302,
        "Y": 1195.7226105267425
      },
      {
        "ShowGeometry": true,
        "Name": "Stair Family Type",
        "Id": "c227e785b58943edafa76525500a0bd7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1340.6435631607924
      },
      {
        "ShowGeometry": true,
        "Name": "Ticket Validator Family Type",
        "Id": "b72ecce27dbf4e2cb0eee76b03dc336d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 2008.9454027606675
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "60a71154374945eeb0db2843f0f4b194",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 0.33982790081904568
      },
      {
        "ShowGeometry": true,
        "Name": "Index",
        "Id": "31a13685283c42b9add86dd57ed46c95",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2051.698533319237,
        "Y": 100.71107487074448
      },
      {
        "ShowGeometry": true,
        "Name": "List of Platform Heights [m]",
        "Id": "3c5c3fe74d5b41d4b4b801f168fe29d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2049.5497853218467,
        "Y": -74.226093650692292
      },
      {
        "ShowGeometry": true,
        "Name": "Passengers/Train",
        "Id": "5d9828480221475baf6e48bad2b42525",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 82.007818451052117,
        "Y": 658.65373683887833
      },
      {
        "ShowGeometry": true,
        "Name": "Regional Traffic",
        "Id": "d087c5b10db143da9f71e77163911823",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 273.17696972281442
      },
      {
        "ShowGeometry": true,
        "Name": "Number of Agents",
        "Id": "c126dde365db4cc7a46bb27a6b30f6ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -815.69863143758778,
        "Y": 183.35189289320215
      },
      {
        "ShowGeometry": true,
        "Name": "Tread Width",
        "Id": "3e49a6e7984843bcaf9cd979a140f65d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -815.69863143758778,
        "Y": 253.12864970402234
      },
      {
        "ShowGeometry": true,
        "Name": "Train Family Wall Type",
        "Id": "8cde6c34c459454e9004058a26f28e9c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2050.5312931478393,
        "Y": 1627.0586372750247
      },
      {
        "ShowGeometry": true,
        "Name": "Ifc Export",
        "Id": "7b90c8e74b004d8ca656aef26d3f8cfd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2273.0139843758775,
        "Y": 1606.0327431217336
      },
      {
        "ShowGeometry": true,
        "Name": "Track Spacing [m]",
        "Id": "bd1b00af5a374ae78a3db17b3cc8d4f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 347.12268366347962
      },
      {
        "ShowGeometry": true,
        "Name": "Platform Width Override",
        "Id": "5362827e790549c5b778bda177cd6bfd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 421.06839760414459
      },
      {
        "ShowGeometry": true,
        "Name": "Platform Width [m]",
        "Id": "b2c1f69647394f44a916f5bcb14b7bff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1660.715408745142,
        "Y": 495.01411154480979
      },
      {
        "ShowGeometry": true,
        "Name": "Column Spacing",
        "Id": "1df9694bdc1e411ca2ac7e2131f07671",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1191.3984774603121,
        "Y": -634.96696427072379
      },
      {
        "ShowGeometry": true,
        "Name": "Stair Width",
        "Id": "4ba388afdb6f4a199c2adaf4d7e4f99c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.7744374854124,
        "Y": -817.91322843250578
      },
      {
        "ShowGeometry": true,
        "Name": "Escalator Width (gross)",
        "Id": "072f17785abf4cc39dc5136a68b95710",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.77443748541,
        "Y": -605.74324360864807
      },
      {
        "ShowGeometry": true,
        "Name": "Clearance Values Ril.813.0202",
        "Id": "876097dbc23944c9b6110b8939af53c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2043.77443748541,
        "Y": -322.84993051017113
      },
      {
        "ShowGeometry": true,
        "Name": "Number of Stairs",
        "Id": "2dc815a069a34ecd827e425ba9d48455",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.77443748541,
        "Y": -888.63655670712546
      },
      {
        "ShowGeometry": true,
        "Name": "No. of Exits",
        "Id": "5549baa7f780455384ca099becc0b93e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1191.3984774603121,
        "Y": -761.64219219082383
      },
      {
        "ShowGeometry": true,
        "Name": "No. of Ticket Machines Per Exit",
        "Id": "362a811f743d4f03a38ab35cc82d6377",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -817.14167701381621,
        "Y": 476.66220012280132
      },
      {
        "ShowGeometry": true,
        "Name": "No. of Track Lines",
        "Id": "a23efd7c6d0f4301aaa00e4eba189874",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1191.3984774603121,
        "Y": -824.97980615087272
      },
      {
        "ShowGeometry": true,
        "Name": "No. of Levels",
        "Id": "4b40e27ff785438dbe70b1ae9941cfd5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1191.3984774603121,
        "Y": -888.31742011092274
      },
      {
        "ShowGeometry": true,
        "Name": "Number of Escalators",
        "Id": "93dd3d42c8c4464fb90f83360efc52de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.77443748541,
        "Y": -676.46657188326731
      },
      {
        "ShowGeometry": true,
        "Name": "Minimum Path Width",
        "Id": "5a57219466db46d29f2521ba7ebbc3fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2052.77443748541,
        "Y": -393.57325878479037
      },
      {
        "ShowGeometry": true,
        "Name": "List.AddItemToEnd",
        "Id": "767cbce34ce6427e9a7f619a0bb4f935",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1675.2925635580043,
        "Y": -323.81793962109396
      },
      {
        "ShowGeometry": true,
        "Name": "Vertical Transportation List",
        "Id": "4afb43897b264e4bbb7f76c5701457a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1438.7507244612814,
        "Y": -532.8932542274872
      },
      {
        "ShowGeometry": true,
        "Name": "General Parameter List",
        "Id": "1661a82a791d4ef8aefdd38dc65c9189",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -697.09064936745119,
        "Y": -815.5308706719768
      },
      {
        "ShowGeometry": true,
        "Name": "Top Level List",
        "Id": "057219e7ac7943268312aa8bbe8cf431",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -420.31802929850664,
        "Y": 451.16156413025988
      },
      {
        "ShowGeometry": true,
        "Name": "Crowdit List",
        "Id": "e345f84b7c264af9b6dab424ebebf9c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -410.82135717707536,
        "Y": 199.49548924243595
      },
      {
        "ShowGeometry": true,
        "Name": "Export Manager",
        "Id": "1c53288618d5449c8403f3964fb0e68f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2831.854158572814,
        "Y": 582.54335857818455
      },
      {
        "ShowGeometry": true,
        "Name": "View Manager",
        "Id": "87e6d59395374d1186a9b34aa57f3548",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2337.2265017196373,
        "Y": 585.05595483221759
      },
      {
        "ShowGeometry": true,
        "Name": "Colored Views",
        "Id": "3b2c10c8a1524b479b5cd847680f0240",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1993.9717234103368,
        "Y": 739.69833598398043
      },
      {
        "ShowGeometry": true,
        "Name": "dwg Export",
        "Id": "63402c7670f742acb41b19fc3c0ad594",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2258.2449330973018,
        "Y": 1923.7328620183739
      },
      {
        "ShowGeometry": true,
        "Name": "View Export",
        "Id": "d09eb7be7c5e4b79bddbdd7f3912d1bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2389.2725905898592,
        "Y": 1347.3407525892794
      },
      {
        "ShowGeometry": true,
        "Name": "Color Export",
        "Id": "de5b48ea60e349d49fbefa11c9f00ed2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2238.5734180527247,
        "Y": 1464.6452598896344
      },
      {
        "ShowGeometry": true,
        "Name": "Log Export",
        "Id": "6e93aa57406243c2b6f53041a8942466",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2315.3186768603859,
        "Y": 2072.9727759727502
      },
      {
        "ShowGeometry": true,
        "Name": "Directory Path",
        "Id": "03bf2edffdbd4ad18d85298e3ea57e68",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2326.8150246032947,
        "Y": 872.01166921222841
      },
      {
        "ShowGeometry": true,
        "Name": "Subfolders",
        "Id": "ff17db7c0a864e948289d7fedbef2c52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2285.1424734585362,
        "Y": 1048.2743126089401
      },
      {
        "ShowGeometry": true,
        "Name": "Folder Name",
        "Id": "30b6ec3bedbc4969a5d94292630a946b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2272.2923272434141,
        "Y": 1235.2072781268273
      },
      {
        "ShowGeometry": true,
        "Name": "Number Suffix",
        "Id": "574f44dd54594825959be19fffcac4de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2346.7221519444838,
        "Y": 1111.157055995762
      },
      {
        "ShowGeometry": true,
        "Name": "Obstacles",
        "Id": "96286062063d408db68bfe0c1d4dcd34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2014.9717234103368,
        "Y": 809.20228807188937
      },
      {
        "ShowGeometry": true,
        "Name": "Destination Zones",
        "Id": "53a3fa21b73d40d0bb3a902a1bd49c33",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1967.9717234103368,
        "Y": 998.21019224770646
      },
      {
        "ShowGeometry": true,
        "Name": "Vertical Transportation",
        "Id": "bcd98c5768c34d419f03ff1b876ec7f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1936.9717234103366,
        "Y": 1092.7141443356145
      },
      {
        "ShowGeometry": true,
        "Name": "Origin Zones",
        "Id": "8babd6351e9a4db4a769cc4fc0d806d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2002.9717234103368,
        "Y": 903.7062401597974
      },
      {
        "ShowGeometry": true,
        "Name": "Walkable Floors",
        "Id": "422f2fbbd2a2461e94ae664c918e2b23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1982.9717234103368,
        "Y": 1187.2180964235215
      },
      {
        "ShowGeometry": true,
        "Name": "View To Keep",
        "Id": "263536cdede54434af2a2036eca4f9c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 88.833482042055948,
        "Y": 122.46734847243727
      },
      {
        "ShowGeometry": true,
        "Name": "Export Mapping",
        "Id": "190741c55ff54935a522ddcf25594936",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1998.8816198069567,
        "Y": 1766.3548398249366
      },
      {
        "ShowGeometry": true,
        "Name": "Transaction.Start",
        "Id": "785587e89e0d4254851d66b8d1b81fc9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1040.2019875144426,
        "Y": 420.42610064477213
      },
      {
        "ShowGeometry": true,
        "Name": "Transaction.Start",
        "Id": "42fa0620dad04892beca9eb2a257c5c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1944.9717234103366,
        "Y": 598.79295972854334
      },
      {
        "ShowGeometry": true,
        "Name": "Transaction.End",
        "Id": "7702ac28ad8c4ec2abf515aa060304b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1606.7019875144426,
        "Y": 420.42610064477213
      },
      {
        "ShowGeometry": true,
        "Name": "Transaction.End",
        "Id": "add6db02c20d4497b94e71129528fc96",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2564.7381613791067,
        "Y": 598.79295972854334
      },
      {
        "ShowGeometry": true,
        "Name": "If export, only EG",
        "Id": "047741e73c17484a91a2f3248d39b8b5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 444.89960996563241,
        "Y": 942.53477405768649
      },
      {
        "ShowGeometry": true,
        "Name": "onlyExport",
        "Id": "8d5617f0720d498e98eed01bf97aaa4b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 443.77640851537467,
        "Y": 864.92200387512685
      },
      {
        "ShowGeometry": true,
        "Name": "Element Types",
        "Id": "5a8c93ed681842fcb64989005e839819",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 195.84834720858339,
        "Y": 1031.2568876850951
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Type",
        "Id": "c25cbbdf3b464ccbbc774d9d6b63c519",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 380.23967921796043,
        "Y": 1033.9424378270949
      },
      {
        "ShowGeometry": true,
        "Name": "Export Floorplans",
        "Id": "4d7c14264b2a4ec787164bc1dd0d8a0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 627.37101108171464,
        "Y": 1071.2390001536628
      },
      {
        "ShowGeometry": true,
        "Name": "Image Display",
        "Id": "f1b1829957a848b7b925ce69bc81949f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3115.2776604965397,
        "Y": 468.29553746507344
      },
      {
        "ShowGeometry": true,
        "Name": "Image Loader",
        "Id": "9766b00e40fd400b99a630af05263bd3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3103.8267316743354,
        "Y": 322.32851692699171
      },
      {
        "ShowGeometry": true,
        "Name": "Colored Floorplan",
        "Id": "afa7bf92610949a5b82ffe696914cb2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3304.4940592014532,
        "Y": 552.52824673870111
      },
      {
        "ShowGeometry": true,
        "Name": "Virtual Environment",
        "Id": "f7f85b44e9b44c3883d81b1e2ff143e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2874.7467995604861,
        "Y": 67.289713636241856
      },
      {
        "ShowGeometry": true,
        "Name": "Checkpoint Path",
        "Id": "73e499de29b34d5ea4e0a28ddd72bf89",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2829.3040982760044,
        "Y": -150.51409755535866
      },
      {
        "ShowGeometry": true,
        "Name": "Forward Pass",
        "Id": "d74759e5f4d44522994e5c5998e4c4a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3261.6637307303276,
        "Y": -72.4279112674738
      },
      {
        "ShowGeometry": true,
        "Name": "Image Display",
        "Id": "7eb1d8d7c7354628a00d62fb83a001ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3388.3591669702519,
        "Y": 364.67695284386258
      },
      {
        "ShowGeometry": true,
        "Name": "Critical Area Prediction",
        "Id": "37f6b588ac2845e4a13409424528ad28",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3718.9725083194426,
        "Y": 368.71728148422187
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "12895c35f82c48e393382cce9405866d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3563.9699771791015,
        "Y": -80.583009840913718
      }
    ],
    "Annotations": [
      {
        "Id": "ed0a8753746c40729624de93d457afac",
        "Title": "Length Calculation",
        "Nodes": [
          "6f587da72e1149979c6a2c4c9f2c0d40",
          "f720c80e6f1d4f21bebdcb9555f2933e",
          "3cb6533b3fa5459f9123ae291f780de2",
          "2f3255ccafbc41a380f658fde805b3c4",
          "7b33e5c900614f629567cf0acb30494b",
          "b420fc1637f44fc5a6fd8e9929a525df"
        ],
        "Left": -2060.9580825152143,
        "Top": 570.45811408933116,
        "Width": 699.976444010573,
        "Height": 423.63545297749329,
        "FontSize": 36.0,
        "InitialTop": 623.79144742266453,
        "InitialHeight": 446.30211964416003,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9279151ca01044f08132c5f1bb12b5ce",
        "Title": "Platform Width Calculation",
        "Nodes": [
          "af774d71e51647caae282fc088bf06bb",
          "3949bf9b3e7a4dcfb52c38c63d41f89c",
          "2122344a6c6c4f5e900634e71d62c5eb",
          "04530e04386248d3a3affe3762d7660b",
          "60a71154374945eeb0db2843f0f4b194",
          "31a13685283c42b9add86dd57ed46c95",
          "3c5c3fe74d5b41d4b4b801f168fe29d2",
          "d087c5b10db143da9f71e77163911823",
          "bd1b00af5a374ae78a3db17b3cc8d4f5",
          "5362827e790549c5b778bda177cd6bfd",
          "b2c1f69647394f44a916f5bcb14b7bff"
        ],
        "Left": -2061.698533319237,
        "Top": -127.55942698402563,
        "Width": 1161.4607790347191,
        "Height": 691.57353852883546,
        "FontSize": 36.0,
        "InitialTop": -74.226093650692292,
        "InitialHeight": 714.24020519550209,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFC1D676"
      },
      {
        "Id": "46865fb535034401a428eba516d9e758",
        "Title": "Vertical Transportation",
        "Nodes": [
          "d5fd982584d446088314965fc077506a",
          "e15d5903d5f94bfabbbc763e0f037f08",
          "4ba388afdb6f4a199c2adaf4d7e4f99c",
          "072f17785abf4cc39dc5136a68b95710",
          "876097dbc23944c9b6110b8939af53c9",
          "2dc815a069a34ecd827e425ba9d48455",
          "5a57219466db46d29f2521ba7ebbc3fa",
          "767cbce34ce6427e9a7f619a0bb4f935",
          "93dd3d42c8c4464fb90f83360efc52de",
          "4afb43897b264e4bbb7f76c5701457a1",
          "859c366329bb4d16875a776dac8f000a"
        ],
        "Left": -2062.7744374854124,
        "Top": -941.96989004045884,
        "Width": 861.35704635746424,
        "Height": 791.45329286362107,
        "FontSize": 36.0,
        "InitialTop": -888.63655670712546,
        "InitialHeight": 710.78662619695433,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "da77c4c88ec74745aa6fdf867dfb0d3c",
        "Title": "Family Types",
        "Nodes": [
          "16ebeca796054d8f923afbaf528319bd",
          "d7a859123a084f57bf9f6c049349a8b5",
          "066869354e7b44b8a9563afcbb0780e0",
          "a546ad92001346f5bb198c55452494d8",
          "52c8935a887d4c54825856a370029332",
          "764f7e4dd112489fab080cb3a02a11f4",
          "a7e8c75ff74c43c1b3ffb9bbdb322529",
          "073e994e28f14c03b35614344fb596c3",
          "0bc8b8aefcb94b0f851e4c51d941ae82",
          "c227e785b58943edafa76525500a0bd7",
          "b72ecce27dbf4e2cb0eee76b03dc336d",
          "8cde6c34c459454e9004058a26f28e9c"
        ],
        "Left": -2060.5312931478393,
        "Top": 1000.8951557132267,
        "Width": 809.31793367177579,
        "Height": 1102.3835803807742,
        "FontSize": 36.0,
        "InitialTop": 1054.22848904656,
        "InitialHeight": 1099.7169137141075,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFC1D676"
      },
      {
        "Id": "727ae8ee733a448fa9ddc1195985340e",
        "Title": "Geometry Generation",
        "Nodes": [
          "5e46294564674e7d8151f3a2a1c328fa",
          "785587e89e0d4254851d66b8d1b81fc9",
          "7702ac28ad8c4ec2abf515aa060304b1"
        ],
        "Left": 1030.2019875144426,
        "Top": 353.09276731143882,
        "Width": 781.16666666666674,
        "Height": 198.71020539557048,
        "FontSize": 48.0,
        "InitialTop": 420.42610064477213,
        "InitialHeight": 146.04353872890391,
        "TextblockHeight": 57.333333333333336,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "dffdb77cda0141f6b673dcd929d15b63",
        "Title": "crowd:it Parameters",
        "Nodes": [
          "c126dde365db4cc7a46bb27a6b30f6ff",
          "3e49a6e7984843bcaf9cd979a140f65d",
          "e345f84b7c264af9b6dab424ebebf9c2"
        ],
        "Left": -825.69863143758778,
        "Top": 130.01855955986881,
        "Width": 556.21060759384579,
        "Height": 192.11009014415353,
        "FontSize": 36.0,
        "InitialTop": 183.35189289320215,
        "InitialHeight": 214.77675681082019,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "253c8c06e9ea49349eaa55fedb521ccd",
        "Title": "Top Level Parameters",
        "Nodes": [
          "619194ee147a46bf869e3e6373ed406f",
          "5f4f339b8e3e4864bf9f6a99777f8b4c",
          "362a811f743d4f03a38ab35cc82d6377",
          "057219e7ac7943268312aa8bbe8cf431"
        ],
        "Left": -827.1416770138203,
        "Top": 340.5416146550088,
        "Width": 558.156981048647,
        "Height": 287.90783760224912,
        "FontSize": 36.0,
        "InitialTop": 393.87494798834211,
        "InitialHeight": 310.5745042689158,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "77c42fcea8eb46708ae1c9a95924ac33",
        "Title": "General Parameters",
        "Nodes": [
          "5a1fb6986487418a80057656a50ca8a1",
          "5549baa7f780455384ca099becc0b93e",
          "a23efd7c6d0f4301aaa00e4eba189874",
          "4b40e27ff785438dbe70b1ae9941cfd5",
          "1df9694bdc1e411ca2ac7e2131f07671",
          "d81e3a3ec50544a4a711c14418961e25",
          "1661a82a791d4ef8aefdd38dc65c9189"
        ],
        "Left": -1201.3984774603121,
        "Top": -941.65075344425611,
        "Width": 716.30782809286086,
        "Height": 439.02140313358234,
        "FontSize": 36.0,
        "InitialTop": -888.31742011092274,
        "InitialHeight": 461.68806980024897,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "78eaee378bff487fb343ecf05f613002",
        "Title": "out of Order",
        "Nodes": [
          "5d9828480221475baf6e48bad2b42525"
        ],
        "Left": 72.007818451052117,
        "Top": 627.320403505545,
        "Width": 319.33333333333331,
        "Height": 100.33333333333337,
        "FontSize": 18.0,
        "InitialTop": 658.65373683887833,
        "InitialHeight": 145.0,
        "TextblockHeight": 21.333333333333332,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "13f8415c7a03455a99c23b87be7aba72",
        "Title": "Floor Plan Creation + Export",
        "Nodes": [
          "1c53288618d5449c8403f3964fb0e68f",
          "87e6d59395374d1186a9b34aa57f3548",
          "3b2c10c8a1524b479b5cd847680f0240",
          "03bf2edffdbd4ad18d85298e3ea57e68",
          "ff17db7c0a864e948289d7fedbef2c52",
          "30b6ec3bedbc4969a5d94292630a946b",
          "574f44dd54594825959be19fffcac4de",
          "96286062063d408db68bfe0c1d4dcd34",
          "53a3fa21b73d40d0bb3a902a1bd49c33",
          "bcd98c5768c34d419f03ff1b876ec7f4",
          "8babd6351e9a4db4a769cc4fc0d806d4",
          "422f2fbbd2a2461e94ae664c918e2b23",
          "7b90c8e74b004d8ca656aef26d3f8cfd",
          "63402c7670f742acb41b19fc3c0ad594",
          "190741c55ff54935a522ddcf25594936",
          "de5b48ea60e349d49fbefa11c9f00ed2",
          "6e93aa57406243c2b6f53041a8942466",
          "d09eb7be7c5e4b79bddbdd7f3912d1bb",
          "add6db02c20d4497b94e71129528fc96",
          "42fa0620dad04892beca9eb2a257c5c3"
        ],
        "Left": 1926.9717234103366,
        "Top": 515.21002524485118,
        "Width": 1071.5491018291439,
        "Height": 1626.7627507278989,
        "FontSize": 48.0,
        "InitialTop": 582.54335857818455,
        "InitialHeight": 1635.4294173945657,
        "TextblockHeight": 57.333333333333336,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "171600c950eb498f86176799e0444c26",
        "Title": "Preparation",
        "Nodes": [
          "91184f7c047c40aaa110ded98cf3e461",
          "b94ab649f1304a028e41b8d07f94707c",
          "b5296ebfad454f98b72cc564ba0e8214",
          "b946a6d5f8134cbd98d05f5965d1fa06",
          "263536cdede54434af2a2036eca4f9c8"
        ],
        "Left": -151.13631875421493,
        "Top": -162.70045100436855,
        "Width": 1038.484146993012,
        "Height": 866.71759328451333,
        "FontSize": 36.0,
        "InitialTop": -109.3671176710352,
        "InitialHeight": 516.0509266178467,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "381f63ce22ff450497dc1181346a698e",
        "Title": "Direct Export",
        "Nodes": [
          "047741e73c17484a91a2f3248d39b8b5",
          "8d5617f0720d498e98eed01bf97aaa4b",
          "5a8c93ed681842fcb64989005e839819",
          "c25cbbdf3b464ccbbc774d9d6b63c519",
          "4d7c14264b2a4ec787164bc1dd0d8a0d"
        ],
        "Left": 185.84834720858339,
        "Top": 811.58867054179348,
        "Width": 618.85599720646462,
        "Height": 389.98366294520258,
        "FontSize": 36.0,
        "InitialTop": 864.92200387512685,
        "InitialHeight": 351.31699627853595,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "2a1874c6757841fe8d47948831e1d423",
        "Title": "Neural Network Group",
        "Nodes": [
          "f7f85b44e9b44c3883d81b1e2ff143e8",
          "73e499de29b34d5ea4e0a28ddd72bf89",
          "d74759e5f4d44522994e5c5998e4c4a0"
        ],
        "Left": 2819.3040982760044,
        "Top": -203.847430888692,
        "Width": 593.02629912098973,
        "Height": 366.80381119160052,
        "FontSize": 36.0,
        "InitialTop": -150.51409755535866,
        "InitialHeight": 362.80381119160052,
        "TextblockHeight": 43.333333333333336,
        "Background": "#FFB9F9E1"
      }
    ],
    "X": -2164.2154919507921,
    "Y": 238.59651913515893,
    "Zoom": 0.80292997750623918
  }
}